#   y[n] ~ bernoulli(theta);
# Simulate binary data
N <- 100
y <- rbinom(N, 1, .4)
data <- list(y=y, N=N)
# Fit model
m <- stan_model(model_code = bernoulli)
samples <- sampling(m, data=data, iter=1000, chains=1)
require(rstan)
# Model:
#   t ~ Bernoulli(theta)
#     theta ~ Beta(1,1)
bernoulli <- "
data {
int<lower=1> N;
vector[N] x;
}
parameters {
real<lower=0,upper=1> theta;
}
model {
x ~ bernoulli(theta);
theta ~ beta(1,1);
}"
# int<lower=0,upper=1> x[N]; // HOW IS THIS DIFFERENT FROM ''?
# for (n in 1:N)
#   y[n] ~ bernoulli(theta);
# Simulate binary data
N <- 100
y <- rbinom(N, 1, .4)
data <- list(y=y, N=N)
# Fit model
m <- stan_model(model_code = bernoulli)
# https://www.cs.helsinki.fi/u/sakaya/tutorial/
# Consider, for instance, inferring a Gaussian with an unknown mean and variance
#   x ~ N(mu, sigma)
#     mu ~ N(0,10)
gaussian <- "
data {
int<lower=1> n;
vector[n] x;
}
parameters {
real mu;
real<lower=0> sigma;
}
model {
mu ~ normal(0, 10);
x ~ normal(mu, sigma);
}
"
library("rstan")
# simulate gaussian data with mean=5 and sd=10
n <- 1000
x <- rnorm(n, mean=5, sd=10)
data <- list(x=x, n=n)
data
require(rstan)
# Model:
#   t ~ Bernoulli(theta)
#     theta ~ Beta(1,1)
bernoulli <- "
data {
int<lower=1> N;
vector[N] x;
}
parameters {
real<lower=0,upper=1> theta;
}
model {
x ~ bernoulli(theta);
theta ~ beta(1,1);
}"
# int<lower=0,upper=1> x[N]; // HOW IS THIS DIFFERENT FROM ''?
# for (n in 1:N)
#   y[n] ~ bernoulli(theta);
# Simulate binary data
N <- 100
x <- rbinom(N, 1, .4)
data <- list(x=x, N=N)
# Fit model
m <- stan_model(model_code = bernoulli)
data
model_code
require(rstan)
# Model:
#   t ~ Bernoulli(theta)
#     theta ~ Beta(1,1)
bernoulli <- "
data {
int<lower=1> N;
int<lower=0,upper=1> x[N]; // HOW IS THIS DIFFERENT FROM 'vector[n] x'?
}
parameters {
real<lower=0,upper=1> theta;
}
model {
x ~ bernoulli(theta);
theta ~ beta(1,1);
}"
# for (n in 1:N)
#   y[n] ~ bernoulli(theta);
# Simulate binary data
N <- 100
x <- rbinom(N, 1, .4)
data <- list(x=x, N=N)
# Fit model
m <- stan_model(model_code = bernoulli)
# Generate samples from the posterior
samples <- sampling(m, data=data, iter=1000, chains=1)
# Extract results
theta <- mean(extract(samples)$theta)
theta
require(rstan)
# Model:
#   t ~ Bernoulli(theta)
#     theta ~ Beta(1,1)
bernoulli <- "
data {
int<lower=1> N;
int<lower=0,upper=1> x[N]; // HOW IS THIS DIFFERENT FROM 'vector[n] x'?
}
parameters {
real<lower=0,upper=1> theta;
}
model {
//  x ~ bernoulli(theta);
for (n in 1:N)
x[n] ~ bernoulli(theta);
theta ~ beta(1,1);
}"
# Simulate binary data
N <- 100
x <- rbinom(N, 1, .4)
data <- list(x=x, N=N)
# Fit model
m <- stan_model(model_code = bernoulli)
# Generate samples from the posterior
samples <- sampling(m, data=data, iter=1000, chains=1)
# Extract results
theta <- mean(extract(samples)$theta)
theta
# https://www.cs.helsinki.fi/u/sakaya/tutorial/
require(rstan)
require(gplots)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(100)
pca <- "
data {
int<lower=0> N;   // Number of samples
int<lower=0> D;   // The original dimension
int<lower=0> K;   // The latent dimension
matrix[N, D] X;   // The data matrix
}
parameters {
matrix[N, K] Z;            // The latent matrix
matrix[D, K] W;            // The weight matrix
real<lower=0> tau;         // Noise term
vector<lower=0>[K] alpha;  // ARD prior
}
transformed parameters{
vector<lower=0>[K] t_alpha;   // declare standard deviation of ARD
real<lower=0> t_tau;          // declare standard deviation of Noise
t_alpha = inv(sqrt(alpha));   // standard deviation
t_tau = inv(sqrt(tau));       // standard deviation of Noise
}
model {
tau ~ gamma(1,1);			        // noise prior
to_vector(Z) ~ normal(0,1);   // latent variables prior. WHAT IS to_vector()??
alpha ~ gamma(1e-3,1e-3);			// ARD prior
for(k in 1:K)
W[,k] ~ normal(0, t_alpha[k]); // Weights
to_vector(X) ~ normal(to_vector(Z*W'), t_tau);  // Likelihood. WHAT IS to_vector()??
} "
N <- 200
D <- 20
K <- 5
Z <- matrix(rnorm(N*K,0,1),N,K)    # Latent components
tau <- 3
alpha <- rep(1,K)    # Component precisions for the two data sets
W <- matrix(0,D,K)   # The weights
for(k in 1:K)  W[,k] <- rnorm(D,0,1/sqrt(alpha[k]))
X <- Z %*% t(W) + matrix(rnorm(N*D,0,1/sqrt(tau)),N,D)
data <- list(N = N, D = D, K = 10, X = X)
m <- stan_model(model_code = pca)
# Fit VB
stan.fit.vb <- vb(m, data = data, algorithm = "meanfield")
W.vb <- apply(extract(stan.fit.vb,"W")[[1]], c(2,3), mean)
alpha.vb <- apply(extract(stan.fit.vb,"alpha")[[1]], c(2), mean)
heatmap.2(W.vb, col = bluered(70), dendrogram='none',trace='none', Rowv = FALSE, Colv = FALSE, key=FALSE)
load("http://cs.helsinki.fi/u/sakaya/tutorial/data/UML.RData")
X <- GeneExpression.HL60
N <- dim(X)[1]
D <- dim(X)[2]
K <- 5
data <- list(N = N, D = D, K = K, X = X)
m <- stan_model(model_code = pca)
stan.fit.vb.real <- vb(m, data = data, algorithm = "meanfield", iter = 5000)
alpha.vb.real <- apply(extract(stan.fit.vb.real,"alpha")[[1]], c(2), mean)
Z.vb <- apply(extract(stan.fit.vb.real,"Z")[[1]], c(2,3), mean)
W.vb <- apply(extract(stan.fit.vb.real,"W")[[1]], c(2,3), mean)
W.bbn
W.vb
library(scater)
library(data.table)
library(purrr)
library(ggplot2)
source("/Users/ricard/gastrulation/rna/differential/utils.R")
io <- list()
io$basedir <- "/Users/ricard/data/gastrulation"
# io$sample_metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$sample_metadata <- paste0(io$basedir,"/sample_metadata_with_new_RNA.txt")
# io$rna.infile <- paste(io$basedir,"rna/parsed/sceset_filtered.rds",sep="/")
io$rna.infile <- paste(io$basedir,"rna/parsed/sceset_filtered_e7-5_with_3bKO_2018-03-07.rds",sep="/")
io$outdir <- "/Users/ricard/gastrulation/rna/differential/out"
## Define options
opts <- list()
# opts$stage_lineage <- c("E7.5_Ectoderm","E7.5_Cardiac","E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS")
# opts$stage_lineage <- c("E7.5_Ectoderm","E7.5_Mesoderm")
# opts$stage_lineage <- c("E7.5_WT","E7.5_KO")
opts$stage_lineage1 <- c("E7.5_WT")
opts$stage_lineage2 <- c("E7.5_KO")
opts$threshold_fdr <- 0.0001
# Define which cells to use
# opts$cells <- fread(io$sample_metadata, header=T) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
#   .[pass_rnaQC==T & stage_lineage%in%c(opts$stage_lineage1,opts$stage_lineage2),id_rna]
opts$cells <- fread(io$sample_metadata, header=T) %>% .[,stage_dnmt:=paste(stage,KO_3b,sep="_")] %>%
.[pass_rnaQC==T & stage_dnmt%in%c(opts$stage_lineage1,opts$stage_lineage2) & lineage=="Ectoderm",id_rna]
sample_metadata <- fread(io$sample_metadata) %>% .[id_rna %in% opts$cells] %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")]
.[,stage_lineage:=paste(stage,KO_3b,sep="_")]
# Load SCEset object
sce <- readRDS(io$rna.infile)# %>% toSingleCellExperiment()
# Filter cells
sce <- sce[,colnames(sce) %in% opts$cells]
# Remove duplicated ensembl IDs and spike ins
# rowData(sce) <- GRanges(rowData(sce))
# sce <- sce[!duplicated(rowData(sce)$ens_id),]
# sce <- sce[!is.na(rowData(sce)$ens_id),]
# Extract feature metadata to do the overlap
# rna_metadata <- rowData(sce) %>% as.data.frame %>% tibble::rownames_to_column("gene") %>% as.data.table %>%
#   .[,c("chr","start","end","gene","ens_id")]  %>%
#   .[,chr:=as.factor(sub("chr","",chr))] %>%
#   setnames("ens_id","id")
# Create data.table from SCEset object
rna <- exprs(sce) %>% t %>% as.data.table(keep.rownames="id_rna") %>% melt(id.vars="id_rna", value.name="expr", variable.name="gene") %>%
merge(rowData(sce) %>% as.data.frame(row.names=rownames(sce)) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id")] %>% as.data.table %>% setnames("ens_id","id"))
rna <- merge(rna, sample_metadata[,c("id_rna","stage_lineage")], by="id_rna")
# Define the two exclusive groups
rna[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
sample_metadata[,group:=as.factor(as.numeric(stage_lineage%in%opts$stage_lineage2))]
# rna_filt <- rna
# Filter genes based on dropout
# opts$max.dropout <- 0.25
# rna <- rna[,dropout:=mean(expr<0.1),by="gene"] %>% .[dropout<=opts$max.dropout] %>% .[,dropout:=NULL]
# Filter genes based on variance
# opts$fvar <- 0.5
# genes_var <- names(tail(sort(apply(exprs(sce_filt),1,var)), n=nrow(sce_filt)*opts$fvar))
# sce_filt <- sce_filt[genes_var,opts$cells]
# Filter genes based on biological overdispersion
# opts$fvar <- 0.5
# genes_var <- rownames(sce_filt)[tail(sort(rowData(sce_filt)$bioVar, index.return=TRUE)$ix, n=nrow(sce_filt)*opts$fvar)]
# sce_filt <- sce_filt[genes_var,opts$cells]
# genes_oversdispersion <- rownames(sce_filt)[rowData(sce_filt)$bioVar > 1]
# sce_filt <- sce_filt[genes_oversdispersion,opts$cells]
# T-test under normality assumption
out <- rna[, .(N0 = .SD[group=="0",.N], N1 = .SD[group=="1",.N],
diff = mean(.SD[group=="1",expr]) - mean(.SD[group=="0",expr]),
p.value = t.test(x=.SD[group=="1",expr], y=.SD[group=="0",expr], var.equal=FALSE)[["p.value"]]), by = c("id","gene")] %>%
.[, c("padj_fdr") := list(p.adjust(p.value, method = "fdr"))] %>%
.[, c("log_padj_fdr") := list(-log10(padj_fdr))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
out_filt <- out[abs(diff)>1 & padj_fdr<opts$threshold_fdr]
View(out_filt)
out_filt
gg_volcano_plot <- function(tmp, title = "") {
negative_hits <- tmp[sig==TRUE & diff<0,id]
positive_hits <- tmp[sig==TRUE & diff>0,id]
all <- nrow(tmp)
xlim <- max(abs(tmp$diff))
ylim <- max(-log10(tmp$p.value))
p <- ggplot(tmp, aes(x=diff, y=-log10(p.value))) +
labs(title=title, x="Expression Differentiatederence", y=expression(paste("-log"[10],"(p.value)"))) +
# geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-xlim-2,xlim+2)) +
scale_y_continuous(limits=c(0,ylim+1)) +
annotate("text", x=0, y=ylim+1, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-10, y=ylim+1, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=10, y=ylim+1, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
return(p)
}
gg_volcano_plot(out_filt)
tmp <- out_filt
negative_hits <- tmp[sig==TRUE & diff<0,id]
positive_hits <- tmp[sig==TRUE & diff>0,id]
all <- nrow(tmp)
all
gg_volcano_plot(out)
gg_volcano_plot <- function(tmp, title = "") {
negative_hits <- tmp[sig==TRUE & diff<0,id]
positive_hits <- tmp[sig==TRUE & diff>0,id]
all <- nrow(tmp)
xlim <- max(abs(tmp$diff))
ylim <- max(-log10(tmp$p.value))
p <- ggplot(tmp, aes(x=diff, y=-log10(p.value))) +
labs(title=title, x="Expression Difference", y=expression(paste("-log"[10],"(p.value)"))) +
# geom_hline(yintercept = -log10(opts$threshold_fdr), color="blue") +
geom_segment(aes(x=0, xend=0, y=0, yend=8), color="orange") +
geom_point(aes(color=sig), size=2) +
scale_color_manual(values=c("black","red")) +
scale_x_continuous(limits=c(-xlim-2,xlim+2)) +
scale_y_continuous(limits=c(0,ylim+1)) +
annotate("text", x=0, y=ylim+1, size=7, label=sprintf("(%d)", all)) +
annotate("text", x=-10, y=ylim+1, size=7, label=sprintf("%d (-)",length(negative_hits))) +
annotate("text", x=10, y=ylim+1, size=7, label=sprintf("%d (+)",length(positive_hits))) +
# ggrepel::geom_text_repel(data=cor_samples[sig == TRUE], aes(x=r, y=-log10(p), label=gene), size=6) +
scatter_theme()
return(p)
}
gg_volcano_plot(out)
# tmp <- mean.stat[sig==T]
# tmp <- head(out_filt,n=10)
tmp <- head(out_filt,n=10)
for (i in 1:nrow(tmp)) {
foo <- rna[gene==tmp[i,gene]]# %>% setkey(stage_lineage,expr) %>% .[,sample:=factor(sample,levels=sample)]
p <- ggplot(foo, aes(x=stage_lineage, y=expr)) +
ggtitle(tmp[i,gene]) +
geom_jitter(aes(color=stage_lineage), size=2.0) +
geom_boxplot(aes(fill=stage_lineage), alpha=0.5, outlier.shape=NA) +
boxplot_theme() +
theme(
plot.title = element_text(size=rel(1.5), hjust=0.5, vjust=0)
)
# pdf(sprintf("%s/%s_%s_%s.pdf",io$outdir,tmp[i,anno],tmp[i,id],tmp[i,gene]))
print(p)
# dev.off()
}
diff = var(.SD[group=="1",expr]) - var(.SD[group=="0",expr]), , by = c("id","gene")]
# T-test under normality assumption
out <- rna[, .(N0 = .SD[group=="0",.N], N1 = .SD[group=="1",.N],
diff = var(.SD[group=="1",expr]) - var(.SD[group=="0",expr]), , by = c("id","gene"))]
# T-test under normality assumption
out <- rna[, .(N0 = .SD[group=="0",.N], N1 = .SD[group=="1",.N],
diff = var(.SD[group=="1",expr]) - var(.SD[group=="0",expr]), by = c("id","gene"))]
View(out)
rna
# T-test under normality assumption
out <- rna[, .(N0 = .SD[group=="0",.N], N1 = .SD[group=="1",.N],
diff = var(.SD[group=="1",expr]) - var(.SD[group=="0",expr])), by = c("id","gene")]
View(out)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
# rownames(m)<-x[,1]
rownames(m)<-x[[1]]
m
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/gastrulation"
# io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$sample.metadata <- paste0(io$basedir,"/sample_metadata_with_new_RNA.txt")
# io$rna.file <- "/Users/ricard/data/gastrulation/rna/parsed/sceset_filtered.rds"
io$rna.file <- paste(io$basedir,"rna/parsed/sceset_filtered_e7-5_with_3bKO_2018-03-07.rds",sep="/")
io$outdir <- "/Users/ricard/gastrulation/rna/mofa/out"
## Define options ##
opts <- list()
# Define which stage and lineages to look at
# opts$stage_lineage <- c("E7.5_Ectoderm","E7.5_Cardiac")
opts$stage_lineage <- c("E7.5_KO","E7.5_WT")
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS","E7.5_Ectoderm","E7.5_Cardiac")
# opts$stage_lineage <- c("E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS")
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE")
# opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# opts$stage <- c("E7.5")
# Filtering options for RNA
opts$rna_rm.low <- T       # Remove low expressed genes
opts$rna_rm.const <- T     # Remove non-variable genes
opts$rna_min.cdr <- 0.25   # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 5000    # maximum number of genes (filter based on variance)
# Define which cells to use
# opts$rna_cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
opts$rna_cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,KO_3b,sep="_")] %>%
.[pass_rnaQC==T & outlier==F & stage_lineage%in%opts$stage_lineage,id_rna]
sample_metadata <- fread(io$sample.metadata)[,c("sample","id_rna","stage","lineage","method","KO_3b")] %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")]
.[,stage_lineage:=paste(stage,KO_3b,sep="_")]
model <- loadModel(paste0(io$outdir,"/model.hdf5"))
sample_metadata_filt <- sample_metadata %>% setkey(sample) %>% .[sampleNames(model)]
plotVarianceExplained(model)
plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$lineage)
plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$stage)
plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorScatter(model, factors=c("2","3"), color_by=sample_metadata_filt$lineage)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=c("1","2","3","4","5","6","7","8"), color_by=sample_metadata_filt$KO_3b)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=c("1","2","3","4","5","6"), color_by=sample_metadata_filt$KO_3b)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=c("7","8","9","10"), color_by=sample_metadata_filt$KO_3b)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
library(scater)
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
# rownames(m)<-x[,1]
rownames(m)<-x[[1]]
m
}
## Define I/O ##
io <- list()
io$basedir <- "/Users/ricard/data/gastrulation"
# io$sample.metadata <- "/Users/ricard/data/gastrulation/sample_metadata.txt"
io$sample.metadata <- paste0(io$basedir,"/sample_metadata_with_new_RNA.txt")
# io$rna.file <- "/Users/ricard/data/gastrulation/rna/parsed/sceset_filtered.rds"
io$rna.file <- paste(io$basedir,"rna/parsed/sceset_filtered_e7-5_with_3bKO_2018-03-07.rds",sep="/")
io$outdir <- "/Users/ricard/gastrulation/rna/mofa/out"
## Define options ##
opts <- list()
# Define which stage and lineages to look at
# opts$stage_lineage <- c("E7.5_Ectoderm","E7.5_Cardiac")
opts$stage_lineage <- c("E7.5_KO","E7.5_WT")
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE","E5.5_EPI","E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS","E7.5_Ectoderm","E7.5_Cardiac")
# opts$stage_lineage <- c("E6.5_EPI","E6.5_PS","E6.75_EPI","E6.75_PS")
# opts$stage_lineage <- c("E4.5_EPI","E4.5_PE")
# opts$stage <- c("E4.5","E5.5","E6.5","E6.75","E7.5")
# opts$stage <- c("E7.5")
# Filtering options for RNA
opts$rna_rm.low <- T       # Remove low expressed genes
opts$rna_rm.const <- T     # Remove non-variable genes
opts$rna_min.cdr <- 0.25   # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 5000    # maximum number of genes (filter based on variance)
# Define which cells to use
# opts$rna_cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,lineage,sep="_")] %>%
opts$rna_cells <- fread(io$sample.metadata) %>% .[,stage_lineage:=paste(stage,KO_3b,sep="_")] %>%
.[pass_rnaQC==T & outlier==F & stage_lineage%in%opts$stage_lineage,id_rna]
sample_metadata <- fread(io$sample.metadata)[,c("sample","id_rna","stage","lineage","method","KO_3b")] %>%
# .[,stage_lineage:=paste(stage,lineage,sep="_")]
.[,stage_lineage:=paste(stage,KO_3b,sep="_")]
# Load scater object
sce <- readRDS(io$rna.file)
# Filter cells
sce <- sce[,colnames(sce) %in% opts$rna_cells]
# Convert to data.table
rna_dt <- exprs(sce) %>% t %>% as.data.table(keep.rownames = "id_rna") %>%
melt(id.vars = "id_rna", value.name = "expr", variable.name = "gene") %>%
merge(rowData(sce) %>% as.data.frame(row.names = rownames(sce)) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id")] %>% setnames("ens_id","id"))
rna_dt <- merge(rna_dt, sample_metadata[id_rna%in%opts$rna_cells,c("sample","id_rna","stage","stage_lineage")], by="id_rna")
# Remove lowly expressed genes
if (opts$rna_rm.low) {
rna_dt <- rna_dt[,mean:=mean(expr),by="id"] %>% .[mean>=1.0] %>% .[,mean:=NULL]
}
# Remove genes with constant expression levels and sites with constant methylation levels
if (opts$rna_rm.const) {
rna_dt <- rna_dt[,var:=var(expr),by="id"] %>% .[var>0] %>% .[,var:=NULL]
}
# Filter genes with low cellular detection rate and sites with low coverage across samples
rna_dt <- rna_dt[,cdr:=sum(expr>0)/length(opts$rna_cells), by="gene"] %>% .[cdr>=opts$rna_min.cdr] %>% .[,cdr:=NULL]
# Extract top N highly variable genes
keep_hv_genes <- rna_dt[,.(var=var(expr)), by="gene"] %>% setorder(-var)  %>% head(n = opts$rna_ngenes) %>% .$gene
rna_dt <- rna_dt[gene%in%keep_hv_genes]
# rna_matrix <- rna_dt[,c("gene","expr","sample")] %>% .[,sample:=factor(sample,levels=union(opts$rna_cells,opts$met_cells))] %>%
rna_matrix <- rna_dt[,c("gene","expr","sample")] %>%
dcast(sample~gene, value.var="expr", drop=F) %>% matrix.please() %>% t
outfile <- paste0(io$outdir,"/model.hdf5")
MOFAobject <- createMOFAobject(list(" RNA"=rna_matrix))
DirOptions <- list("dataDir" = tempdir(), "outFile" = outfile)
DataOptions <- getDefaultDataOpts()
DataOptions$scaleViews <- F
DataOptions$centerFeatures <- T
ModelOptions <- getDefaultModelOpts(MOFAobject)
ModelOptions$numFactors <- 25
ModelOptions$sparsity <- T
ModelOptions$learnIntercept <- F
# ModelOptions$covariates <- data.frame(mean=sample_metadata$mean)
TrainOptions <- getDefaultTrainOpts()
TrainOptions$maxiter <- 1000
TrainOptions$tolerance <- 0.1
TrainOptions$DropFactorThreshold <- 0.000
MOFAmodel <- prepareMOFA(MOFAobject, DirOptions = DirOptions, DataOptions = DataOptions, ModelOptions = ModelOptions, TrainOptions = TrainOptions)
model <- runMOFA(MOFAmodel, DirOptions, mofaPath = "/Users/ricard/anaconda2/bin/mofa")
plotVarianceExplained(model)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=c("7","8","9","10"), color_by=sample_metadata_filt$KO_3b)
# model <- loadModel(paste0(io$outdir,"/model.hdf5"))
sample_metadata_filt <- sample_metadata %>% setkey(sample) %>% .[sampleNames(model)]
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=c("7","8","9","10"), color_by=sample_metadata_filt$KO_3b)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=11:15, color_by=sample_metadata_filt$KO_3b)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=16:20, color_by=sample_metadata_filt$KO_3b)
# plotFactorBeeswarm(model, factors="all", color_by=sample_metadata_filt$KO_3b)
plotFactorBeeswarm(model, factors=21:25, color_by=sample_metadata_filt$KO_3b)
calculateVarianceExplained(model)
plotWeights(model, view="RNA", factor="25", abs=F, nfeatures = 20)
viewNames(model)
plotWeights(model, view=" RNA", factor="25", abs=F, nfeatures = 20)
plotWeights(model, view=" RNA", factor="10", abs=F, nfeatures = 20)
plotWeights(model, view=" RNA", factor="25", abs=F, nfeatures = 10)
