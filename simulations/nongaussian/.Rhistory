library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/results/nongaussian/binary"
# Load bernoulli models
files <- list.files(in.folder, pattern="^bernoulli")
bernoulli_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
likelihood <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-5)
bernoulli_models[[paste(likelihood,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
bernoulli_dt <- data.table(
trial = as.numeric(sapply(strsplit(names(bernoulli_models),"_"),"[[",2)),
elbo = sapply(bernoulli_models, function(x) tail(x@TrainStats$elbo,1) ),
k = sapply(bernoulli_models, function(x) tail(x@TrainStats$activeK,1) ),
likelihood="bernoulli"
)
# Load gaussian models
files <- list.files(in.folder, pattern="^gaussian")
gaussian_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
likelihood <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-5)
gaussian_models[[paste(likelihood,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
gaussian_dt <- data.table(
trial = as.numeric(sapply(strsplit(names(gaussian_models),"_"),"[[",2)),
elbo = sapply(gaussian_models, function(x) tail(x@TrainStats$elbo,1) ),
k = sapply(gaussian_models, function(x) tail(x@TrainStats$activeK,1) ),
likelihood="gaussian"
)
# Concatenate
dt <- rbind(bernoulli_dt,gaussian_dt) %>%
.[,k:=k-1]
p1 <- ggplot(dt, aes(x=likelihood, y=-log(-elbo))) +
geom_boxplot(aes(fill=likelihood), alpha=0.5, outlier.shape=NA) +
ggbeeswarm::geom_quasirandom(aes(color=likelihood)) +
labs(x="", y="Log Evidence lower bound") +
theme_fn()
print(p1)
# pdf("/Users/ricard/CLL/simulations/nongaussian/out/elbo.pdf", width=7, height=5, useDingbats = F)
# print(p1)
# dev.off()
p2 <- ggplot(dt, aes(x=likelihood, y=k)) +
geom_bar(aes(group = trial, fill=likelihood), position = "dodge", stat="identity", color="black") +
geom_hline(yintercept = 10, color="black", size=0.6, linetype="solid") +
labs(x="", y="Number of infered factors") +
# scale_y_continuous(limits=c(0,15),breaks=c(5,10,15)) +
# scale_x_continuous(limits=c(-0.03,0.93), breaks=c(0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9)) +
theme_fn()
print(p2)
# pdf("/Users/ricard/CLL/simulations/nongaussian/out/nfactors.pdf", width=7, height=5)
# print(p2)
# dev.off()
sigmoid <- function(x) 1/(1+exp(-x))
dt[,mse:=Inf]
for (i in 1:length(gaussian_models)) {
Y <- getTrainData(gaussian_models[[i]], views="0")
Z <- getFactors(gaussian_models[[i]], include_intercept = T)
SW <- getWeights(gaussian_models[[i]], views="0")
Ypred_gaussian <- t(Z %*% t(SW))
mse_gaussian <- mean((Ypred_gaussian - Y)**2)
dt[likelihood=="gaussian" & trial==i-1, mse:=mse_gaussian]
}
for (i in 1:length(bernoulli_models)) {
Y <- getTrainData(bernoulli_models[[i]], views="0")
Z <- getFactors(bernoulli_models[[i]], include_intercept = T)
SW <- getWeights(bernoulli_models[[i]], views="0")
Ypred_bernoulli <- sigmoid(t(Z %*% t(SW)))
mse_bernoulli <- mean((Ypred_bernoulli - Y)**2)
dt[likelihood=="bernoulli" & trial==i-1, mse:=mse_bernoulli]
}
# Plot reconstruction error
p3 <- ggplot(dt, aes(x=likelihood, y=mse)) +
geom_boxplot(aes(fill=likelihood), alpha=0.5, outlier.shape=NA) +
ggbeeswarm::geom_quasirandom(aes(color=likelihood)) +
labs(x="", y="Mean Squared Error") +
theme_fn()
print(p3)
# pdf("/Users/ricard/CLL/simulations/nongaussian/out/mse.pdf", width=7, height=5, useDingbats = F)
# print(p3)
# dev.off()
gaussian_models[[1]]
gaussian_models[[1]]@ModelOpts$learnMean
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(data, nPcs=5, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
weights_list <- list()
for (d in D_list) {
weights_list[[d]] <- list()
for (m in views) {
weights_list[[d]][[m]] <- fread(paste0(in.folder,"/",d,"_W_",m,".txt")) %>% as.matrix
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),"0",paste0("D=",i),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="Spike and Slab"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="ARD"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
# True weights
foo <- weights_list[["10000"]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[["10000_0"]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.01))
bar1 <- getWeights(sparse_models[["10000_0"]], views = "0")[,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[["10000_0"]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[["10000_0"]], views = "0")[,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[["10000"]]@loadings[1:10000,]
r <- cor(abs(foo),abs(bar1))
dt_sparse <- data.table(model="sparse", factor=sparse_active_factors, mean=0, cor=0)
for (k in sparse_active_factors) {
kk <- which.max(r[,k])
dt_sparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )]
dt_sparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar1[,k]))]
}
r <- cor(abs(foo),abs(bar2))
dt_nonsparse <- data.table(model="nonsparse", factor=nonsparse_active_factors, mean=0, cor=0)
for (k in nonsparse_active_factors) {
kk <- which.max(r[,k])
dt_nonsparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca <- data.table(model="pca", factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
dt <- rbind(dt_sparse, dt_nonsparse, dt_pca)
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
theme_bw()
print(p)
# True weights
foo <- weights_list[["10000"]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[["10000_0"]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.03))
bar1 <- getWeights(sparse_models[["10000_0"]], views = "0")[,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[["10000_0"]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.03))
bar2 <- getWeights(nonsparse_models[["10000_0"]], views = "0")[,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[["10000"]]@loadings[1:10000,]
r <- cor(abs(foo),abs(bar1))
View(r)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(data, nPcs=5, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
weights_list <- list()
for (d in D_list) {
weights_list[[d]] <- list()
for (m in views) {
weights_list[[d]][[m]] <- fread(paste0(in.folder,"/",d,"_W_",m,".txt")) %>% as.matrix
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),"0",paste0("D=",i),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="Spike and Slab"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="ARD"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
# True weights
foo <- weights_list[["5000"]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[["5000_0"]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.03))
bar1 <- getWeights(sparse_models[["5000_0"]], views = "0")[,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[["5000_0"]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.03))
bar2 <- getWeights(nonsparse_models[["5000_0"]], views = "0")[,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[["5000"]]@loadings[1:5000,]
r <- cor(abs(foo),abs(bar1))
dt_sparse <- data.table(model="sparse", factor=sparse_active_factors, mean=0, cor=0)
for (k in sparse_active_factors) {
kk <- which.max(r[,k])
dt_sparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )]
dt_sparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar1[,k]))]
}
r <- cor(abs(foo),abs(bar2))
dt_nonsparse <- data.table(model="nonsparse", factor=nonsparse_active_factors, mean=0, cor=0)
for (k in nonsparse_active_factors) {
kk <- which.max(r[,k])
dt_nonsparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca <- data.table(model="pca", factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
dt <- rbind(dt_sparse, dt_nonsparse, dt_pca)
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
theme_bw()
print(p)
# True weights
foo <- weights_list[["5000"]][["0"]]
# Sparse model weights
R2 <- calculateVarianceExplained(sparse_models[["5000_0"]], plotit=F)$R2PerFactor[,"0"]
sparse_active_factors <- as.character(which(R2>0.01))
bar1 <- getWeights(sparse_models[["5000_0"]], views = "0")[,sparse_active_factors]
# Non-sparse model weights
R2 <- calculateVarianceExplained(nonsparse_models[["5000_0"]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[["5000_0"]], views = "0")[,nonsparse_active_factors]
# PCA weights
bar3 <- pca_models[["5000"]]@loadings[1:5000,]
r <- cor(abs(foo),abs(bar1))
dt_sparse <- data.table(model="sparse", factor=sparse_active_factors, mean=0, cor=0)
for (k in sparse_active_factors) {
kk <- which.max(r[,k])
dt_sparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar1[,k])<1e-2) )]
dt_sparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar1[,k]))]
}
r <- cor(abs(foo),abs(bar2))
dt_nonsparse <- data.table(model="nonsparse", factor=nonsparse_active_factors, mean=0, cor=0)
for (k in nonsparse_active_factors) {
kk <- which.max(r[,k])
dt_nonsparse[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar2[,k])<1e-2) )]
dt_nonsparse[factor==k, cor:=cor(abs(foo[,kk]),abs(bar2[,k]))]
}
r <- cor(abs(foo),abs(bar3))
dt_pca <- data.table(model="pca", factor=1:ncol(r), mean=0, cor=0)
for (k in 1:ncol(r)) {
kk <- which.max(r[,k])
dt_pca[factor==k, mean:=mean( (abs(foo[,kk])<1e-2)==(abs(bar3[,k])<1e-2) )]
dt_pca[factor==k, cor:=cor(abs(foo[,kk]),abs(bar3[,k]))]
}
dt <- rbind(dt_sparse, dt_nonsparse, dt_pca)
p <- ggplot(dt, aes(x=model, y=mean)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Fraction of true zero weights recovered") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
p <- ggplot(dt, aes(x=model, y=cor)) +
geom_boxplot(aes(fill=model), alpha=0.5) +
ggbeeswarm::geom_quasirandom(aes(color=model)) +
labs(x="", y="Correlation with true weights") +
theme_bw()
print(p)
sparse_active_factors
nonsparse_active_factors
R2 <- calculateVarianceExplained(nonsparse_models[["5000_0"]], plotit=F)$R2PerFactor[,"0"]
nonsparse_active_factors <- as.character(which(R2>0.01))
bar2 <- getWeights(nonsparse_models[["5000_0"]], views = "0")[,nonsparse_active_factors]
r <- cor(abs(foo),abs(bar2))
View(r)
