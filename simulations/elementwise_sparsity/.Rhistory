# Load expression data and convert to data.table
sce_filt <- readRDS(io$expr)
# sce_filt <- sce[,opts$cells]
rna <- exprs(sce_filt) %>% t %>% as.data.table(keep.rownames = "sample") %>%
melt(id.vars = "sample", value.name = "expr", variable.name = "gene") %>%
merge(fData(sce_filt) %>% tibble::rownames_to_column("gene") %>% .[,c("gene","ens_id")] %>% setnames("ens_id","id")) %>%
merge(sample_metadata, by="sample")
# Convert to matrtix
rna_matrix <- rna[,c("sample","gene","expr")] %>% dcast(sample~gene, value.var="expr") %>% matrix.please
plotTSNE(sce_filt, ntop = 500, colour_by="culture", shape_by="type", rand_seed=42)
plotTSNE(sce_filt, ntop = 500, colour_by="plate", rand_seed=42)
plotTSNE(sce_filt, ntop = 1000, colour_by="plate", rand_seed=1)
plotTSNE(sce_filt, ntop = 1000, colour_by="plate", rand_seed=1)
plotPCA(sce_filt, ntop=1000)
plotPCA(sce_filt, ntop=1000)
library(scater)
library(ggplot2)
library(data.table)
library(purrr)
## Define I/O ##
io <- list()
io$expr <- "/Users/ricard/data/gastrulation_NMT/expr/parsed/sceset.rds"
io$metadata.file <- "/Users/ricard/data/gastrulation_NMT/metadata.txt"
## Define options ##
opts <- list()
# Define stages and lineages to look at
# opts$stages <- c("E3.5","E4.5","E5.5","E6.5")
# opts$stages <- c("E3.5","E4.5","E5.5","E6.5","E6.75")
# opts$lineages <- c("EPI","PE","ICM","PS")
# opts$lineages <- c("EPI","PE","PS","ICM")
# Define which cells to use
# opts$cells <- fread(io$metadata.file) %>% .[pass_exprQC==T & outlier==F & stage%in%opts$stage & lineage%in%opts$lineage, sample]
# opts$cells <- fread(io$metadata.file) %>% .[pass_exprQC==T & pass_metQC==T & outlier==F & stage%in%opts$stage & lineage%in%opts$lineage, sample]
sce_filt <- readRDS(io$expr)
io$expr <- "/Users/ricard/data/gastrulation_NMT/rna/parsed/sceset.rds"
sce_filt <- readRDS(io$expr)
plotTSNE(sce_filt)
plotTSNE(sce_filt, color_by="stage")
View(pData(sce_filt))
plotTSNE(sce_filt, colour_by="stage")
sce_filt_TB <- sce_filt[c("Elf5","Wnt7b","Tex19.1","Eomes")]
plotPCA(sce_filt_TB, colour_by="lineage", ncomponents = 2)
plotPCA(sce_filt_TB, ncomponents = 2)
sce_filt$Tgene <- exprs(sce_filt)["T",]
sce_filt_PS <- sce_filt[c("T","Mesp1","Mesp2","Snai1","Sox17","Wnt2")]
plotPCA(sce_filt_PS, ncomponents = 1)
plotPCA(sce_filt_PS, ncomponents = 2)
sce_filt$Tgene <- exprs(sce_filt)["T",]
plotTSNE(sce_filt, colour_by="Tgene", shape_by="stage")
plotPCA(sce_filt_PS, color_by="stage", ncomponents = 2)
plotPCA(sce_filt_PS, colour_by="stage", ncomponents = 2)
plotPCA(sce_filt_PS, colour_by="stage", ncomponents = 1)
sce_filt$Mesp1 <- exprs(sce_filt)["Mesp1",]
plotTSNE(sce_filt, colour_by="Mesp1", shape_by="stage")
sce_filt$Tgene <- exprs(sce_filt)["T",]
plotTSNE(sce_filt, colour_by="Tgene", shape_by="stage")
sce_filt$Nanog <- exprs(sce_filt)["Nanog",]
plotTSNE(sce_filt, colour_by="Nanog", shape_by="stage")
sce_filt$Pou5f1 <- exprs(sce_filt)["Pou5f1",]
plotTSNE(sce_filt, colour_by="Pou5f1", shape_by="stage")
sce_filt_TB <- sce_filt[c("Elf5","Wnt7b","Tex19.1")]
plotPCA(sce_filt_TB, ncomponents = 2)
sce_filt$Elf5 <- exprs(sce_filt)["Elf5",]
plotTSNE(sce_filt, colour_by="Elf5", shape_by="stage")
list.files("/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0")
files <- list.files("/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0")
i
i=1
data <- list()
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
split
d
d <- split[1]
trial
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
trial <- substr(split[[2]],1,nchar(split[[2]])-5)
trial
split[[2]]
trial <- substr(split[[2]],1,nchar(split[[2]])-4)
trial
files <- list.files("/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0")
data <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-4)
data[[paste(d,trial,sep="_")]] <- fread(paste0(in.folder,"/",files[i])) %>% as.matrix
}
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
files <- list.files("/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0")
data <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-4)
data[[paste(d,trial,sep="_")]] <- fread(paste0(in.folder,"/",files[i])) %>% as.matrix
}
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0"
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0"
files <- list.files(in.folder)
data <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-4)
data[[paste(d,trial,sep="_")]] <- fread(paste0(in.folder,"/",files[i])) %>% as.matrix
}
data
data[[1]] %>% View
?pca
files
D_list <- sapply(files, function(x) strsplit(files[i],"_")[[1]])
D_list
D_list <- sapply(files, function(x) strsplit(files[i],"_")[[1]][1])
D_list
D_list <- unique(sapply(files, function(x) strsplit(files[i],"_")[[1]][1]))
D_list
sapply(files, function(x) strsplit(files[i],"_")[[1]][1])
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
D_list
M <- 3
ntrials <- 1
files
0:(M-1)
m
m="0"
d
paste0(in.folder,"/",d,"_",m,".txt")
data <- list()
data[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
data_list <- list()
for (m in 0:(M-1) {
for (m in 0:(M-1)) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
m
d
paste0(in.folder,"/",d,"_",m,".txt")
data_list <- list()
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
m
views <- c("0","1","2")
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- reduce("cbind",data_list)
data <- do.call("cbind",data_list)
View(data)
pcaMethods::pca(data, nPCs=1, center=T, scale="none")
asd = pcaMethods::pca(data, nPCs=1, center=T, scale="none")
names(asd)
asd@loadings
pcaMethods::pca(data, nPCs=1, center=T, scale="none")@loadings
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0","1","2")
pca_list <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_list[[d]] <- pcaMethods::pca(data, nPCs=1, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/results/sparsity/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="sparse"]
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights
sparse_weights
pca_list[[1]]@scores
pca_list[[1]]@scores %>% as.data.table
pca_list[[d]] <- pcaMethods::pca(data, nPCs=5, center=T, scale="none")
pca_list[[1]]@scores %>% as.data.table
pca_list[[1]] <- pcaMethods::pca(data, nPCs=5, center=T, scale="none")
pca_list[[1]]@scores %>% as.data.table
pca_list[[1]]
pca_list[[1]] <- pcaMethods::pca(data, nPCs=5, center=T, scale="none")
pca_list[[1]]
pca_list[[d]] <- pcaMethods::pca(data, nPcs=5, center=T, scale="none")
d
d=1
pca_list[[d]] <- pcaMethods::pca(data, nPcs=5, center=T, scale="none")
pca_list[[1]]@scores %>% as.data.table
?met
?melt
asd <- pca_list[[1]]@scores %>% as.data.table %>% melt(variable.name="factor")
View(asd)
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,feature:=1:nrow(.)] %>% . melt(id.vars="feature", variable.name="factor")
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,feature:=1:nrow(.)] %>% melt(id.vars="feature", variable.name="factor")
View(asd)
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,feature:=1:nrow(.)]
View(asd)
pca_list[[d]] <- pcaMethods::pca(t(data), nPcs=5, center=T, scale="none")
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,feature:=1:nrow(.)] %>% melt(id.vars="feature", variable.name="factor")
View(asd)
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,c("feature","trial"):=list(1:nrow(.),"1")] %>% melt(id.vars="feature", variable.name="factor")
View(asd)
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,c("feature","trial"):=list(1:nrow(.),"1")] %>% melt(id.vars=c("feature","trial"), variable.name="factor")
View(asd)
asd <- pca_list[[1]]@scores %>% as.data.table %>% .[,c("feature","trial","D"):=list(1:nrow(.),"1","D=1500")] %>% melt(id.vars=c("feature","trial","D"), variable.name="factor")
View(asd)
head(asd)
asd <- pca_list[[1]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view","type"):=list(1:nrow(.),"1","D=1500","all","PCA")] %>%
melt(id.vars=c("feature","trial","D","view","type"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial","type")]
View(asd)
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0","1","2")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(t(data), nPcs=5, center=T, scale="none")
}
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view","type"):=list(1:nrow(.),"1","D=1500","all","PCA")] %>%
melt(id.vars=c("feature","trial","D","view","type"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial","type")]
}
pca_weights <- pca_weights %>% rbindlist
View(pca_weights)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/data/sparsity/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0","1","2")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(t(data), nPcs=5, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/results/sparsity/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/10Aug/results/sparsity/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view","type"):=list(1:nrow(.),"1","D=1500","all","PCA")] %>%
melt(id.vars=c("feature","trial","D","view","type"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial","type")]
}
pca_weights <- pca_weights %>% rbindlist
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="sparse"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="nonsparse"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
p <- ggplot(weights[D=="D=1000"], aes(x=value)) +
geom_density(aes(fill=type)) +
labs(x="Weight", y="Density") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
weights
unique(weigthts$type)
unique(weigths$type)
unique(weights$type)
View(weights)
weights[D=="D=1000"]
D_list
pca_weights
pca_weights[D=="D=1000"]
names(pca_models)
i
names(pca_models)
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view","type"):=list(1:nrow(.),"1",paste0("D=",i),"all","PCA")] %>%
melt(id.vars=c("feature","trial","D","view","type"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial","type")]
}
pca_weights <- pca_weights %>% rbindlist
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="sparse"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="nonsparse"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
# weights[,log:=abs(log10(abs(value)+0.0001))] %>% .[,log:=log*sign(value)]
# p <- ggplot(weights, aes(x=log)) +
#   geom_density(aes(fill=type)) +
#   # scale_y_continuous(limits = c(0,20)) +
#   facet_wrap(~D, scales = "free_y") +
#   theme_fn()
# print(p)
# p <- ggplot(weights, aes(x=value)) +
#   geom_density(aes(fill=type)) +
#   # scale_y_continuous(limits = c(0,20)) +
#   facet_wrap(~D, scales = "free_y") +
#   theme_fn()
# print(p)
p <- ggplot(weights[D=="D=1000"], aes(x=value)) +
geom_density(aes(fill=type)) +
labs(x="Weight", y="Density") +
theme_bw() + theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
# pdf("/Users/ricard/CLL/simulations/elementwise_sparsity/out/pdf.pdf", width=7, height=5, useDingbats = F)
# print(p)
# dev.off()
p <- ggplot(weights[D=="D=1000"], aes(x=value)) +
stat_ecdf(aes(color=type), geom = "step") +
theme_bw() +
guides(colour = guide_legend(override.aes = list(size=1.5))) +
labs(y="Cumulative density", x="Weights") +
theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
# pdf("/Users/ricard/CLL/simulations/elementwise_sparsity/out/cdf.pdf", width=7, height=5, useDingbats = F)
# print(p)
# dev.off()
p <- ggplot(weights[D=="D=1000" & type%in%c("sparse","nonsparse")], aes(x=value)) +
stat_ecdf(aes(color=type), geom = "step") +
theme_bw() +
guides(colour = guide_legend(override.aes = list(size=1.5))) +
labs(y="Cumulative density", x="Weights") +
theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
