legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(data, nPcs=10, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
weights_list <- list()
for (d in D_list) {
weights_list[[d]] <- list()
for (m in views) {
weights_list[[d]][[m]] <- fread(paste0(in.folder,"/",d,"_W_",m,".txt")) %>% as.matrix
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),"0",paste0("D=",i),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder)
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(data, nPcs=10, center=T, scale="none")
}
files <- list.files(in.folder, pattern=".txt")
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder, pattern=".txt")
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(data, nPcs=10, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder, pattern=".hdf5")
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
weights_list <- list()
for (d in D_list) {
weights_list[[d]] <- list()
for (m in views) {
weights_list[[d]][[m]] <- fread(paste0(in.folder,"/",d,"_W_",m,".txt")) %>% as.matrix
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),"0",paste0("D=",i),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="Spike and Slab"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="ARD"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
names(saprse_weights)
sparse_We
sparse_weights
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),"0",paste0("D=",i),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
i
names(sparse_models)
sparse_weights <- list()
i="5000_0"
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
tmp
tm
tmp
R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
# Select all factors and views which are active
R2 <- calcul
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
R2
nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
nonsparse_weights[[i]]
nonsparse_weights[[i]]
i
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
nonsparse_weights <- list()
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
R2
unique(tmp$factor)
R2
tmp
tmp
names(which(R2[k,]>0.01))
R2
unique(tmp$factor)"
)
""
unique(tmp$factor)
tmp$factor
class(R2)
nonsparse_weights[[i]] <- lapply(as.numeric(unique(tmp$factor)), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
nonsparse_weights
k
k=1
tmp[factor==k]
tmp[factor==k & view%in%names(which(R2[k,]>0.01))]
which(R2[k,]>0.01)
R2
R2[k,]
nonsparse_weights[[i]] <- lapply(as.numeric(unique(tmp$factor)), function(k) tmp[factor==k & view%in%names(which(R2[k,drop=F]>0.01))] ) %>% rbindlist
nonsparse_weights[[i]]
nonsparse_weights[[i]]
R2[k,drop=F]
R2[k,]
R2
R2[k,,drop=F]
which(R2[k,,drop=F]>0.01)
R2[k,,drop=F]>0.01
names(which(R2[k,,drop=F]>0.01))
colnames(which(R2[k,,drop=F]>0.01))
which(R2[k,,drop=F]>0.01)
R2[k,,drop=F]>0.01
unique(tmp$factor)
head(tmp)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder, pattern=".txt")
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
pca_models <- list()
for (d in D_list) {
data_list <- list()
for (m in views) {
data_list[[m]] <- fread(paste0(in.folder,"/",d,"_",m,".txt")) %>% as.matrix
}
data <- do.call("cbind",data_list)
pca_models[[d]] <- pcaMethods::pca(data, nPcs=10, center=T, scale="none")
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/data/D/trial0"
files <- list.files(in.folder, pattern=".hdf5$")
D_list <- unique(sapply(files, function(x) strsplit(x,"_")[[1]][1]))
views <- c("0")
weights_list <- list()
for (d in D_list) {
weights_list[[d]] <- list()
for (m in views) {
weights_list[[d]][[m]] <- fread(paste0(in.folder,"/",d,"_W_",m,".txt")) %>% as.matrix
}
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/sparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
sparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
sparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
in.folder <- "/Users/ricard/data/MOFA/simulations/26Aug/results/nonsparse/D"
files <- list.files(in.folder, pattern=".hdf5$")
nonsparse_models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[2]
trial <- substr(split[[3]],1,nchar(split[[3]])-5)
nonsparse_models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
# PCA model
pca_weights <- list()
for (i in names(pca_models)) {
pca_weights[[i]] <- pca_models[[i]]@scores %>% as.data.table %>%
.[,c("feature","trial","D","view"):=list(1:nrow(.),"0",paste0("D=",i),"all")] %>%
melt(id.vars=c("feature","trial","D","view"), variable.name="factor") %>%
.[,c("feature","factor","value","view","D","trial")]
}
pca_weights <- pca_weights %>% rbindlist %>% .[,type:="Concatenated PCA"]
# Spike and slab model
sparse_weights <- list()
for (i in names(sparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(sparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
# R2 <- calculateVarianceExplained(sparse_models[[i]], plotit=F)$R2PerFactor
# sparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
sparse_weights[[i]] <- tmp
}
sparse_weights <- sparse_weights %>% rbindlist %>% .[,type:="Spike and Slab"]
# ARD model
nonsparse_weights <- list()
for (i in names(nonsparse_models)) {
split <- strsplit(i,"_")[[1]]
d <- split[1]
trial <- split[2]
tmp <- getWeights(nonsparse_models[[i]], as.data.frame=T) %>% as.data.table %>% .[,c("D","trial"):=list(paste0("D=",d), trial) ]
# Select all factors and views which are active
# R2 <- calculateVarianceExplained(nonsparse_models[[i]], plotit=F)$R2PerFactor
# nonsparse_weights[[i]] <- lapply(unique(tmp$factor), function(k) tmp[factor==k & view%in%names(which(R2[k,]>0.01))] ) %>% rbindlist
nonsparse_weights[[i]] <- tmp
}
nonsparse_weights <- nonsparse_weights %>% rbindlist %>% .[,type:="ARD"]
weights <- rbind(pca_weights, sparse_weights, nonsparse_weights)
p <- ggplot(weights[D=="D=5000"], aes(x=value)) +
# p <- ggplot(weights[D=="D=1000" & type%in%c("sparse","nonsparse")], aes(x=value)) +
stat_ecdf(aes(color=type), geom = "step") +
theme_bw() +
guides(colour = guide_legend(override.aes = list(size=1.5))) +
scale_x_continuous(limits=c(-1,1)) +
labs(y="Cumulative density", x="Weights") +
theme(
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="top",
legend.title = element_blank(),
legend.key = element_rect(fill = 'white', linetype='solid'),
legend.text = element_text(size=rel(1.5))
# legend.key.width = unit(1.5,"line"),
# legend.key.height = unit(2,"inch"),
# legend.key.size = unit(2,"inch"),
)
print(p)
# pdf("/Users/ricard/CLL/simulations/elementwise_sparsity/out/cdf.pdf", width=7, height=5, useDingbats = F)
# print(p)
# dev.off()
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(MOFAtools)
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
# plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.5), margin=margin(10,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.5), margin=margin(0,10,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.25)),
axis.text.y=element_text(colour="black",size=rel(1.25)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/MOFA/simulations/18Aug/results/learnK/D"
files <- list.files(in.folder, pattern=".hdf5$")
models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
d <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-5)
models[[paste(d,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
dt <- data.table(
infered_k = sapply(models, function(x) tail(x@TrainStats$activeK,1) ),
D = as.numeric(sapply(strsplit(names(models),"_"),"[[",1)),
# D = as.factor(sapply(strsplit(names(models),"_"),"[[",1)),
trial = as.numeric(sapply(strsplit(names(models),"_"),"[[",2))
) %>% .[,D:=factor(D,levels=sort(unique(D)))] %>%
# .[D %in% c(100,500,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000)]
.[D %in% c(1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,15000,20000,25000)]
# ggplot(dt, aes(x=D, y=infered_k, group=D)) +
#   # geom_point(size=0.5) +
#   geom_boxplot(fill="red", alpha=0.5) +
#   # geom_abline(slope=0, intercept=0, alpha=0.5) +
#   labs(x="Number of dimensions", y="Number of infered factors") +
#   scale_y_continuous(limits=c(5,15), breaks=c(5,10,15)) +
#   # scale_x_continuous(limits=c(5,51), breaks=c(5,10,15,20,25,30,35,40,45,50)) +
#   theme_fn()
p <- ggplot(dt, aes(x=D, y=infered_k)) +
geom_bar(aes(group = trial), position = "dodge", stat="identity", color="white", size=0.3, fill="grey50") +
geom_hline(yintercept = 10, color="black", size=0.6, linetype="solid") +
labs(x="Number of features", y="Number of infered factors") +
scale_y_continuous(limits=c(0,12),breaks=c(5,10)) +
# scale_x_continuous(limits=c(5,51), breaks=c(5,10,15,20,25,30,35,40,45,50)) +
theme_fn() +
theme(
axis.text.x=element_text(colour="black",size=rel(1.5), angle=90, vjust = 0.5)
)
print(p)
# pdf("/Users/ricard/CLL/simulations/learnK/out/D.pdf", width = 7, height = 5)
# print(p)
# dev.off()
View(dt)
in.folder <- "/Users/ricard/data/MOFA/simulations/18Aug/results/learnK/M"
files <- list.files(in.folder, pattern=".hdf5$")
models <- list()
for (i in 1:length(files)) {
split <- strsplit(files[i],"_")[[1]]
m <- split[1]
trial <- substr(split[[2]],1,nchar(split[[2]])-5)
models[[paste(m,trial,sep="_")]] <- loadModel(paste0(in.folder,"/",files[i]))
}
m_dt <- data.table(
infered_k = sapply(models, function(x) tail(x@TrainStats$activeK,1) ),
M = as.numeric(sapply(strsplit(names(models),"_"),"[[",1)),
trial = as.numeric(sapply(strsplit(names(models),"_"),"[[",2))
) %>% .[M<=21] %>% .[,M:=factor(M,levels=sort(unique(M)))]
p <- ggplot(m_dt, aes(x=M, y=infered_k)) +
geom_bar(aes(group = trial), position = "dodge", stat="identity", color="white", size=0.3, fill="grey50") +
geom_hline(yintercept = 10, color="black", size=0.6, linetype="solid") +
labs(x="Number of views", y="Number of infered factors") +
scale_y_continuous(limits=c(0,12),breaks=c(0,10)) +
# scale_x_continuous(limits=c(0,14), breaks=c(1,3,5,7,9,11,13)) +
theme_fn() +
theme(
axis.text.x=element_text(colour="black",size=rel(1.5), angle=90, vjust = 0.5, hjust=0.5)
)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
# plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.5), margin=margin(10,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.5), margin=margin(0,10,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.25)),
axis.text.y=element_text(colour="black",size=rel(1.25)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
m_dt <- data.table(
infered_k = sapply(models, function(x) tail(x@TrainStats$activeK,1) ),
M = as.numeric(sapply(strsplit(names(models),"_"),"[[",1)),
trial = as.numeric(sapply(strsplit(names(models),"_"),"[[",2))
# ) %>% .[M<=21] %>% .[,M:=factor(M,levels=sort(unique(M)))]
) %>% .[,M:=factor(M,levels=sort(unique(M)))]
p <- ggplot(m_dt, aes(x=M, y=infered_k)) +
geom_bar(aes(group = trial), position = "dodge", stat="identity", color="white", size=0.3, fill="grey50") +
geom_hline(yintercept = 10, color="black", size=0.6, linetype="solid") +
labs(x="Number of views", y="Number of infered factors") +
scale_y_continuous(limits=c(0,12),breaks=c(0,10)) +
# scale_x_continuous(limits=c(0,14), breaks=c(1,3,5,7,9,11,13)) +
theme_fn() +
theme(
axis.text.x=element_text(colour="black",size=rel(1.5), angle=90, vjust = 0.5, hjust=0.5)
)
print(p)
?match.arg
class(True)
type(True)
class(TRUE)
as.data.frame=F
stopifnot(class(as.data.frame) != "logical")
as.data.frame=FALSE
stopifnot(class(as.data.frame) != "logical")
class(as.data.frame)
stopifnot(class(as.data.frame) == "logical")
class(50)
length(5)
class(c("1","2"))
?getFactors
