complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- detectPassengers(loadModel(complete_model_file))
incomplete_model <- detectPassengers(loadModel(incomplete_model_file))
# Ground truth data
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
Y <- getTrainData(complete_model, views="Drugs")
# Complete imputation
Z <- getFactors(complete_model, include_intercept = T)
SW <- getWeights(complete_model, views="Drugs")
Ypred_complete <- t(Z %*% t(SW))[,samples]
# Incomplete imputation
Z <- getFactors(incomplete_model, include_intercept = T)
SW <- getWeights(incomplete_model, views="Drugs")
Ypred_incomplete <- t(Z %*% t(SW))[,samples]
tmp[nsamples_downsampled==n & trial==i, complete_mse:=mean((Ypred_complete - Y)**2)]
tmp[nsamples_downsampled==n & trial==i, incomplete_mse:=mean((Ypred_incomplete - Y)**2)]
}
}
}
complete_model <- detectPassengers(loadModel(complete_model_file))
complete_model <- loadModel(complete_model_file)
complete_model_file
devtools::load_all("/Users/ricard/mofa/MOFAtools")
complete_model <- loadModel(complete_model_file)
file=complete_model_file
object = NULL
sortFactors = T
if (is.null(object)) object <- new("MOFAmodel")
object@Expectations <- h5read(file,"expectations")
object@Parameters <- h5read(file,"parameters")
object@Status <- "trained"
library(rhdf5)
if (is.null(object)) object <- new("MOFAmodel")
object@Expectations <- h5read(file,"expectations")
object@Parameters <- h5read(file,"parameters")
object@Status <- "trained"
tryCatch( {
object@TrainStats <- h5read(file, 'training_stats',read.attributes=T);
colnames(object@TrainStats$elbo_terms) <- attr(h5read(file,"training_stats/elbo_terms", read.attributes=T),"colnames")
}, error = function(x) { print("Training stats not found, not loading it...") })
if (length(object@TrainOpts) == 0) {
tryCatch(object@TrainOpts <- as.list(h5read(file, 'training_opts',read.attributes=T)), error = function(x) { print("Training opts not found, not loading it...") })
}
if (length(object@ModelOpts) == 0) {
tryCatch(object@ModelOpts <- as.list(h5read(file, 'model_opts',read.attributes=T)), error = function(x) { print("Model opts not found, not loading it...") })
}
tryCatch( {
TrainData <- h5read(file,"data")
featureData <- h5read(file,"features")
sampleData <- h5read(file,"samples")
for (m in names(TrainData)) {
rownames(TrainData[[m]]) <- sampleData
colnames(TrainData[[m]]) <- featureData[[m]]
TrainData[[m]][is.nan(TrainData[[m]])] <- NA
}
TrainData <- lapply(TrainData, t)
object@TrainData <- TrainData
}, error = function(x) { print("Error loading the training data...") })
object@Dimensions[["M"]] <- length(object@TrainData)
object@Dimensions[["N"]] <- ncol(object@TrainData[[1]])
object@Dimensions[["D"]] <- sapply(object@TrainData,nrow)
object@Dimensions[["K"]] <- ncol(object@Expectations$Z$E)
viewNames(object) <- names(object@TrainData)
sampleNames(object) <- colnames(object@TrainData[[1]])
featureNames(object) <- lapply(object@TrainData,rownames)
factorNames(object) <- as.character(1:object@Dimensions[["K"]])
if (object@ModelOpts$learnMean == TRUE) factorNames(object) <- c("intercept",as.character(1:(object@Dimensions[["K"]]-1)))
if (!is.null(object@ModelOpts$covariates)) {
if (object@ModelOpts$learnMean == TRUE) {
factorNames(object) <- c("intercept", colnames(object@ModelOpts$covariates), as.character((ncol(object@ModelOpts$covariates)+1:(object@Dimensions[["K"]]-1-ncol(object@ModelOpts$covariates)))))
} else {
factorNames(object) <- c(colnames(object@ModelOpts$covariates), as.character((ncol(object@ModelOpts$covariates)+1:(object@Dimensions[["K"]]-1))))
}
}
object <- detectPassengers(object)
views = "all"
factors = "all"
r2_threshold = 0.03
if (class(object) != "MOFAmodel") stop("'object' has to be an instance of MOFAmodel")
if (paste0(views,sep="",collapse="") =="all") {
views <- viewNames(object)
} else {
stopifnot(all(views %in% viewNames(object)))
}
M <- length(views)
factors <- as.character(factors)
if (paste0(factors,collapse="")=="all") {
factors <- factorNames(object)
} else {
stopifnot(all(factors %in% factorNames(object)))
}
Z <- getFactors(object)
r2 <- calculateVarianceExplained(object, views = views, factors = factors, plotit = F, showtotalR2 = F)$R2PerFactor
unique_factors <- as.character(which(rowSums(r2>=r2_threshold)==1))
missing <- sapply(getTrainData(object,views), function(view) sampleNames(object)[apply(view, 2, function(x) all(is.na(x)))] )
names(missing) <- viewNames(object)
for (factor in unique_factors) {
# view <- names(which(r2[factor,]>=r2_threshold))
view <- colnames(r2[which(r2[factor,]>=r2_threshold),,drop=F])
missing_samples <- missing[[view]]
if (length(missing_samples)>0) {
Z[missing_samples,factor] <- NA
}
}
view <- colnames(r2[which(r2[factor,]>=r2_threshold),,drop=F])
view
which(r2[factor,]>=r2_threshold)
r2[which(r2[factor,]>=r2_threshold),,drop=F]
view <- colnames(r2[,which(r2[factor,]>=r2_threshold),drop=F])
view
for (factor in unique_factors) {
# view <- names(which(r2[factor,]>=r2_threshold))
view <- colnames(r2[,which(r2[factor,]>=r2_threshold),drop=F])
missing_samples <- missing[[view]]
if (length(missing_samples)>0) {
Z[missing_samples,factor] <- NA
}
}
object@Expectations$Z$E <- Z
object@Expectations$Z$E
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# in.folder <- "/Users/ricard/data/downsample/results/mRNA"
in.folder <- "/Users/ricard/data/downsample/results/mRNA/old"
nsamples_downsampled <- seq(1,100,2)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_k","incomplete_k"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- detectPassengers(loadModel(complete_model_file))
incomplete_model <- detectPassengers(loadModel(incomplete_model_file))
tmp[nsamples_downsampled==n & trial==i, complete_k:=getDimensions(complete_model)[["K"]]]
tmp[nsamples_downsampled==n & trial==i, incomplete_k:=getDimensions(incomplete_model)[["K"]]]
}
}
}
tmp2 <- melt(tmp,  measure.vars=c("complete_k","incomplete_k"), variable.name="type", value.name="K") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
.[K>0]
ggplot(tmp2, aes(x=nsamples_downsampled, y=K)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
complete_model <- loadModel(complete_model_file)
nsamples_downsampled <- seq(5,100,5)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_mse","incomplete_mse"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
# Ground truth data
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
Y <- getTrainData(complete_model, views="Drugs")
# Complete imputation
Z <- getFactors(complete_model, include_intercept = T)
SW <- getWeights(complete_model, views="Drugs")
Ypred_complete <- t(Z %*% t(SW))[,samples]
# Incomplete imputation
Z <- getFactors(incomplete_model, include_intercept = T)
SW <- getWeights(incomplete_model, views="Drugs")
Ypred_incomplete <- t(Z %*% t(SW))[,samples]
tmp[nsamples_downsampled==n & trial==i, complete_mse:=mean((Ypred_complete - Y)**2)]
tmp[nsamples_downsampled==n & trial==i, incomplete_mse:=mean((Ypred_incomplete - Y)**2)]
}
}
}
nsamples_downsampled <- seq(1,100,2)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_k","incomplete_k"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
tmp[nsamples_downsampled==n & trial==i, complete_k:=getDimensions(complete_model)[["K"]]]
tmp[nsamples_downsampled==n & trial==i, incomplete_k:=getDimensions(incomplete_model)[["K"]]]
}
}
}
View(tmp)
asd = expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_k","incomplete_k"):=0]
View(asd)
nsamples_downsampled <- seq(5,100,5)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_k","incomplete_k"):=0]
for (n in nsamples_downsampled) {
print(n)
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file, sortFactors = F)
incomplete_model <- loadModel(incomplete_model_file, sortFactors = F)
tmp[nsamples_downsampled==n & trial==i, complete_k:=getDimensions(complete_model)[["K"]]]
tmp[nsamples_downsampled==n & trial==i, incomplete_k:=getDimensions(incomplete_model)[["K"]]]
}
}
}
tmp2 <- melt(tmp,  measure.vars=c("complete_k","incomplete_k"), variable.name="type", value.name="K") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
.[K>0]
ggplot(tmp2, aes(x=nsamples_downsampled, y=K)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
View(tmp2)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
# in.folder <- "/Users/ricard/data/downsample/results/mRNA"
# in.folder <- "/Users/ricard/data/downsample/results/mRNA/old"
in.folder <- "/Users/ricard/data/downsample/results/Methylation/old"
ighv <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"IGHV",drop=F]
trisomy12 <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"trisomy12",drop=F]
reactome <- readRDS("/Users/ricard/data/reactome/v59/homo_sapiens/out/human_reactome.rds")
tmp <- read.table("/Users/ricard/data/reactome/v59/homo_sapiens/AllPathways.txt", header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
nsamples_downsampled <- seq(5,100,5)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_r_ighv","incomplete_r_ighv","complete_r_trisomy12","incomplete_r_trisomy12","complete_ngenesets","incomplete_ngenesets"):=0]
for (n in nsamples_downsampled) {
# for (n in seq(1,59,2)) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
# IGHV
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],ighv[samples,], use="complete.obs")))
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],ighv[samples,], use="complete.obs")))
tmp[nsamples_downsampled==n & trial==i, complete_r_ighv:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_ighv:=r_incomplete]
# Trisomy 12
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],trisomy12[samples,], use="complete.obs")))
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],trisomy12[samples,], use="complete.obs")))
tmp[nsamples_downsampled==n & trial==i, complete_r_trisomy12:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_trisomy12:=r_incomplete]
# Number of enriched pathways in the mRNA view
npathways_complete <- FeatureSetEnrichmentAnalysis(
complete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
npathways_incomplete <- FeatureSetEnrichmentAnalysis(
model = incomplete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
tmp[nsamples_downsampled==n & trial==i, complete_ngenesets:=sum(npathways_complete<0.01, na.rm=T)]
tmp[nsamples_downsampled==n & trial==i, incomplete_ngenesets:=sum(npathways_incomplete<0.01, na.rm=T)]
}
}
}
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_ighv","incomplete_r_ighv"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   geom_boxplot(aes(fill=type))
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_trisomy12","incomplete_r_trisomy12"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   geom_boxplot(aes(fill=type))
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
#   .[MSE>0] %>% .[,n:=.N,by=c("nsamples_downsampled","type")] %>% .[n>=4]
ggplot(tmp2[is.na(complete_r_ighv)], aes(x=nsamples_downsampled, y=ngenesets)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
complete_model <- loadModel(complete_model_file)
in.folder <- "/Users/ricard/data/downsample/results/mRNA/old"
ighv <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"IGHV",drop=F]
trisomy12 <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"trisomy12",drop=F]
reactome <- readRDS("/Users/ricard/data/reactome/v59/homo_sapiens/out/human_reactome.rds")
tmp <- read.table("/Users/ricard/data/reactome/v59/homo_sapiens/AllPathways.txt", header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
nsamples_downsampled <- seq(5,100,5)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_r_ighv","incomplete_r_ighv","complete_r_trisomy12","incomplete_r_trisomy12","complete_ngenesets","incomplete_ngenesets"):=0]
for (n in nsamples_downsampled) {
# for (n in seq(1,59,2)) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
# IGHV
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],ighv[samples,], use="complete.obs")))
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],ighv[samples,], use="complete.obs")))
tmp[nsamples_downsampled==n & trial==i, complete_r_ighv:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_ighv:=r_incomplete]
# Trisomy 12
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],trisomy12[samples,], use="complete.obs")))
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],trisomy12[samples,], use="complete.obs")))
tmp[nsamples_downsampled==n & trial==i, complete_r_trisomy12:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_trisomy12:=r_incomplete]
# Number of enriched pathways in the mRNA view
npathways_complete <- FeatureSetEnrichmentAnalysis(
complete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
npathways_incomplete <- FeatureSetEnrichmentAnalysis(
model = incomplete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
tmp[nsamples_downsampled==n & trial==i, complete_ngenesets:=sum(npathways_complete<0.01, na.rm=T)]
tmp[nsamples_downsampled==n & trial==i, incomplete_ngenesets:=sum(npathways_incomplete<0.01, na.rm=T)]
}
}
}
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_ighv","incomplete_r_ighv"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   geom_boxplot(aes(fill=type))
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_trisomy12","incomplete_r_trisomy12"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   geom_boxplot(aes(fill=type))
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
#   .[MSE>0] %>% .[,n:=.N,by=c("nsamples_downsampled","type")] %>% .[n>=4]
ggplot(tmp2[is.na(complete_r_ighv)], aes(x=nsamples_downsampled, y=ngenesets)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
nsamples_downsampled <- seq(5,100,5)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_mse","incomplete_mse"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
# Ground truth data
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
Y <- getTrainData(complete_model, views="Drugs")
# Complete imputation
Z <- getFactors(complete_model, include_intercept = T)
SW <- getWeights(complete_model, views="Drugs")[[1]]
Ypred_complete <- t(Z %*% t(SW))[,samples]
# Incomplete imputation
Z <- getFactors(incomplete_model, include_intercept = T)
SW <- getWeights(incomplete_model, views="Drugs")[[1]]
Ypred_incomplete <- t(Z %*% t(SW))[,samples]
tmp[nsamples_downsampled==n & trial==i, complete_mse:=mean((Ypred_complete - Y)**2)]
tmp[nsamples_downsampled==n & trial==i, incomplete_mse:=mean((Ypred_incomplete - Y)**2)]
}
}
}
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
Y <- getTrainData(complete_model, views="Drugs")[[1]]
Z <- getFactors(complete_model, include_intercept = T)
SW <- getWeights(complete_model, views="Drugs")[[1]]
Ypred_complete <- t(Z %*% t(SW))[,samples]
Z <- getFactors(incomplete_model, include_intercept = T)
SW <- getWeights(incomplete_model, views="Drugs")[[1]]
Ypred_incomplete <- t(Z %*% t(SW))[,samples]
tmp[nsamples_downsampled==n & trial==i, complete_mse:=mean((Ypred_complete - Y)**2)]
tmp[nsamples_downsampled==n & trial==i, incomplete_mse:=mean((Ypred_incomplete - Y)**2)]
nsamples_downsampled <- seq(5,100,5)
ntrials <- 10
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_mse","incomplete_mse"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
# Ground truth data
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
Y <- getTrainData(complete_model, views="Drugs")[[1]]
# Complete imputation
Z <- getFactors(complete_model, include_intercept = T)
SW <- getWeights(complete_model, views="Drugs")[[1]]
Ypred_complete <- t(Z %*% t(SW))[,samples]
# Incomplete imputation
Z <- getFactors(incomplete_model, include_intercept = T)
SW <- getWeights(incomplete_model, views="Drugs")[[1]]
Ypred_incomplete <- t(Z %*% t(SW))[,samples]
tmp[nsamples_downsampled==n & trial==i, complete_mse:=mean((Ypred_complete - Y)**2)]
tmp[nsamples_downsampled==n & trial==i, incomplete_mse:=mean((Ypred_incomplete - Y)**2)]
}
}
}
tmp2 <- melt(tmp,  measure.vars=c("complete_mse","incomplete_mse"), variable.name="type", value.name="MSE") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
.[MSE>0] %>% .[,n:=.N,by=c("nsamples_downsampled","type")] %>% .[n>=5]
ggplot(tmp2, aes(x=nsamples_downsampled, y=MSE)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
print(p)
ggplot(tmp2, aes(x=nsamples_downsampled, y=MSE)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
p <- ggplot(tmp2, aes(x=nsamples_downsampled, y=MSE)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
print(p)
