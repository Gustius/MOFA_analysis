library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/downsample/results/mRNA"
# in.folder <- "/Users/ricard/data/downsample/results/mRNA/old"
nsamples_downsampled <- seq(10,100,5)
# ntrials <- 25
ntrials <- 10
ighv <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"IGHV",drop=F]
trisomy12 <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"trisomy12",drop=F]
reactome <- readRDS("/Users/ricard/data/reactome/v59/homo_sapiens/out/human_reactome.rds")
tmp <- read.table("/Users/ricard/data/reactome/v59/homo_sapiens/AllPathways.txt", header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_r_ighv","incomplete_r_ighv","complete_r_trisomy12","incomplete_r_trisomy12","complete_ngenesets","incomplete_ngenesets"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
print(n)
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file)
incomplete_model <- loadModel(incomplete_model_file)
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
# IGHV,
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],ighv[samples,], use="complete.obs")), na.rm=T)
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],ighv[samples,], use="complete.obs")), na.rm=T)
tmp[nsamples_downsampled==n & trial==i, complete_r_ighv:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_ighv:=r_incomplete]
# Trisomy 12
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],trisomy12[samples,], use="complete.obs")), na.rm=T)
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],trisomy12[samples,], use="complete.obs")), na.rm=T)
tmp[nsamples_downsampled==n & trial==i, complete_r_trisomy12:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_trisomy12:=r_incomplete]
# Number of enriched pathways in the mRNA view
npathways_complete <- FeatureSetEnrichmentAnalysis(
complete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
npathways_incomplete <- FeatureSetEnrichmentAnalysis(
model = incomplete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
tmp[nsamples_downsampled==n & trial==i, complete_ngenesets:=sum(npathways_complete<0.1, na.rm=T)]
tmp[nsamples_downsampled==n & trial==i, incomplete_ngenesets:=sum(npathways_incomplete<0.1, na.rm=T)]
}
}
}
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
ighv <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"IGHV",drop=F]
trisomy12 <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"trisomy12",drop=F]
reactome <- readRDS("/Users/ricard/data/reactome/v59/homo_sapiens/out/human_reactome.rds")
tmp <- read.table("/Users/ricard/data/reactome/v59/homo_sapiens/AllPathways.txt", header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_r_ighv","incomplete_r_ighv","complete_r_trisomy12","incomplete_r_trisomy12","complete_ngenesets","incomplete_ngenesets"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
print(n)
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file, sortFactors=F)
incomplete_model <- loadModel(incomplete_model_file, sortFactors=F)
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
# IGHV,
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],ighv[samples,], use="complete.obs")), na.rm=T)
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],ighv[samples,], use="complete.obs")), na.rm=T)
tmp[nsamples_downsampled==n & trial==i, complete_r_ighv:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_ighv:=r_incomplete]
# Trisomy 12
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],trisomy12[samples,], use="complete.obs")), na.rm=T)
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],trisomy12[samples,], use="complete.obs")), na.rm=T)
tmp[nsamples_downsampled==n & trial==i, complete_r_trisomy12:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_trisomy12:=r_incomplete]
# Number of enriched pathways in the mRNA view
npathways_complete <- FeatureSetEnrichmentAnalysis(
complete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
npathways_incomplete <- FeatureSetEnrichmentAnalysis(
model = incomplete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
tmp[nsamples_downsampled==n & trial==i, complete_ngenesets:=sum(npathways_complete<0.1, na.rm=T)]
tmp[nsamples_downsampled==n & trial==i, incomplete_ngenesets:=sum(npathways_incomplete<0.1, na.rm=T)]
}
}
}
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_ighv","incomplete_r_ighv"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   # geom_boxplot(aes(fill=type))
#   stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
#   stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
#   theme_bw()
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_trisomy12","incomplete_r_trisomy12"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   # geom_boxplot(aes(fill=type))
#   stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
#   stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
#   theme_bw()
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
# geom_boxplot(aes(fill=type))
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
theme_bw()
View(tmp)
in.folder <- "/Users/ricard/data/downsample/results/mRNA"
# in.folder <- "/Users/ricard/data/downsample/results/mRNA/old"
nsamples_downsampled <- seq(10,100,5)
ntrials <- 25
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.015, alpha=0.6) +
theme_bw()
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.015, alpha=0.6) +
theme_bw() +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.015, alpha=0.6) +
theme_bw() +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
?scale_y_continuous
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.1, alpha=0.6) +
theme_bw() +
scale_y_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.1, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
tmp2$nsamples_downsampled
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.1, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=1, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.5, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.5, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.text = element_text(size=rel(1.2))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.5, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.text = element_text(size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.5, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set"))
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.5, alpha=0.6) +
theme_bw() +
scale_x_discrete(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.text = element_text(size=rel(1.3))
)
dim(ighv)
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
.[nsamples_downsampled:=nsamples_downsampled/136]
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
.[,nsamples_downsampled:=nsamples_downsampled/136]
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))] %>%
.[,nsamples_downsampled:=as.numeric(nsamples_downsampled)/136]
View(tmp2)
tmp$nsamples_downsampled
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(nsamples_downsampled,as.factor(trial))] %>%
.[,nsamples_downsampled:=as.numeric(nsamples_downsampled)/136]
View(tmp2)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.5, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.text = element_text(size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.text = element_text(size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.text = element_text(size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(10,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size=rel(1.3))
)
tmp2$nsamples_downsampled
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
# scale_x_continuous(breaks=c(0.1,20,30,40,50,60,70,80,90,100)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size=rel(1.3))
)
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size=rel(1.3))
)
devtools::load_all("/Users/ricard/mofa/MOFAtools")
library(data.table)
library(purrr)
library(ggplot2)
theme_fn <- function() {
theme(
# plot.title = element_text(size=titlesize),
plot.margin = margin(10,10,10,10),
axis.title.x=element_text(colour="black",size=rel(1.75), margin=margin(20,0,3,0)),
axis.title.y=element_text(colour="black",size=rel(1.75), margin=margin(0,20,0,3)),
axis.text.x=element_text(colour="black",size=rel(1.5)),
axis.text.y=element_text(colour="black",size=rel(1.5)),
axis.ticks.x = element_line(colour="black"),
axis.ticks.y = element_line(colour="black"),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
}
in.folder <- "/Users/ricard/data/downsample/results/mRNA"
# in.folder <- "/Users/ricard/data/downsample/results/mRNA/old"
nsamples_downsampled <- seq(10,100,5)
ntrials <- 25
ighv <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"IGHV",drop=F]
trisomy12 <- read.table("/Users/ricard/data/CLL/views/minView=2/mut.txt")[,"trisomy12",drop=F]
reactome <- readRDS("/Users/ricard/data/reactome/v59/homo_sapiens/out/human_reactome.rds")
tmp <- read.table("/Users/ricard/data/reactome/v59/homo_sapiens/AllPathways.txt", header=F, quote="", sep="\t", stringsAsFactors=F)[,c(1,2)]
reactome_meta <- tmp[,2]; names(reactome_meta) <- tmp[,1]
rownames(reactome) <- stringr::str_replace_all(rownames(reactome), reactome_meta)
tmp <- expand.grid(nsamples_downsampled,1:ntrials) %>% as.data.table %>% setnames(c("nsamples_downsampled","trial"))
tmp[,c("complete_r_ighv","incomplete_r_ighv","complete_r_trisomy12","incomplete_r_trisomy12","complete_ngenesets","incomplete_ngenesets"):=0]
for (n in nsamples_downsampled) {
for (i in 1:ntrials) {
print(n)
complete_model_file <- paste0(in.folder,"/learnK_common_",n,"_",i,".hdf5")
incomplete_model_file <- paste0(in.folder,"/learnK_all_",n,"_",i,".hdf5")
if (file.exists(complete_model_file) & file.exists(incomplete_model_file)) {
complete_model <- loadModel(complete_model_file, sortFactors=F)
incomplete_model <- loadModel(incomplete_model_file, sortFactors=F)
samples <- intersect(sampleNames(complete_model), sampleNames(incomplete_model))
# IGHV,
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],ighv[samples,], use="complete.obs")), na.rm=T)
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],ighv[samples,], use="complete.obs")), na.rm=T)
tmp[nsamples_downsampled==n & trial==i, complete_r_ighv:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_ighv:=r_incomplete]
# Trisomy 12
r_complete <- max(abs(cor(getFactors(complete_model)[samples,],trisomy12[samples,], use="complete.obs")), na.rm=T)
r_incomplete <- max(abs(cor(getFactors(incomplete_model)[samples,],trisomy12[samples,], use="complete.obs")), na.rm=T)
tmp[nsamples_downsampled==n & trial==i, complete_r_trisomy12:=r_complete]
tmp[nsamples_downsampled==n & trial==i, incomplete_r_trisomy12:=r_incomplete]
# Number of enriched pathways in the mRNA view
npathways_complete <- FeatureSetEnrichmentAnalysis(
complete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
npathways_incomplete <- FeatureSetEnrichmentAnalysis(
model = incomplete_model,
view = "mRNA",
factors = "all",
feature.sets = reactome,
local.statistic = "loading",
transformation = "abs.value",
global.statistic = "mean.diff",
statistical.test = "parametric",
min.size=15,
alpha=0.05)$pval.adj
tmp[nsamples_downsampled==n & trial==i, complete_ngenesets:=sum(npathways_complete<0.1, na.rm=T)]
tmp[nsamples_downsampled==n & trial==i, incomplete_ngenesets:=sum(npathways_incomplete<0.1, na.rm=T)]
}
}
}
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_ighv","incomplete_r_ighv"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   # geom_boxplot(aes(fill=type))
#   stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
#   stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
#   theme_bw()
# tmp2 <- melt(tmp,  measure.vars=c("complete_r_trisomy12","incomplete_r_trisomy12"), variable.name="type", value.name="R") %>%
#   .[,c("nsamples_downsampled","trial"):=list(as.factor(nsamples_downsampled),as.factor(trial))]
# ggplot(tmp2[R>0], aes(x=nsamples_downsampled, y=R)) +
#   # geom_boxplot(aes(fill=type))
#   stat_summary(aes(group=type, color=type), stat="summary", fun.y="mean", geom="line") +
#   stat_summary(aes(group=type, color=type), stat="summary", fun.data="mean_se", geom="errorbar") +
#   theme_bw()
tmp2 <- melt(tmp,  measure.vars=c("complete_ngenesets","incomplete_ngenesets"), variable.name="type", value.name="ngenesets") %>%
.[,c("nsamples_downsampled","trial"):=list(nsamples_downsampled,as.factor(trial))] %>%
.[,nsamples_downsampled:=as.numeric(nsamples_downsampled)/136]
ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size=rel(1.3))
)
pdf("/Users/ricard/CLL/downsample/out/genesets.pdf", width = 7, height = 4.5)
print(p)
p <- ggplot(tmp2[ngenesets>0], aes(x=nsamples_downsampled, y=ngenesets)) +
stat_summary(aes(group=type, color=type), fun.y="mean", geom="line", size=1) +
stat_summary(aes(group=type, color=type), fun.data="mean_se", geom="errorbar", width=0.01, alpha=0.6) +
theme_bw() +
scale_x_continuous(breaks=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7)) +
labs(x="Downsampling fraction", y="Number of enriched gene sets") +
scale_color_discrete(labels=c("Complete data set", "Incomplete data set")) +
theme(
axis.title= element_text(size=rel(1.7)),
axis.text = element_text(color="black", size=rel(1.3)),
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(size=rel(1.3))
)
pdf("/Users/ricard/CLL/downsample/out/genesets.pdf", width = 7, height = 4.5)
print(p)
dev.off()
