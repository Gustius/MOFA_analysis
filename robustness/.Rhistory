if (opts$cor_samples) {
# To correlate across samples
metrna_filt <- copy(metrna_dt)
## Remove genes/features with constant expression across samples
keep_var_genes <- metrna_filt %>% split(.$anno) %>% map(~ .[, .(var = var(expr)), by = "gene"] %>% .[var > 2, gene])
keep_var_sites <- metrna_filt %>% split(.$anno) %>% map(~ .[, .(var = wtd.var(rate, weight)), by = c("id")] %>% .[var > 2, id])
metrna_filt <- metrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_var_genes[[y]] & id %in% keep_var_sites[[y]]]) %>% rbindlist
## Filter genes with low cellular detection rate and sites with low coverage across samples
nsamples <- length(unique(metrna_filt$sample))
keep_cov_genes <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(cdr = sum(expr > 0) / .N), by = "gene"] %>% .[cdr >= opts$min.cdr, gene])
keep_cov_sites <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(cov = .N / nsamples), by = c("id")] %>% .[cov >= opts$min.coverage, id])
metrna_filt <- metrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_cov_genes[[y]] & id %in% keep_cov_sites[[y]]]) %>% rbindlist
## Filter id-gene pairs with small number of samples (only required for the correlation across samples)
keep_scov_sites <- metrna_filt[,.(n = .N), by = c("id", "anno")] %>% .[n >= opts$min.s] %>% .$id
metrna_filt <- metrna_filt[id %in% keep_scov_sites]
## Extract highly variable genes/sites across samples
keep_hv_genes <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(var = var(expr)), by = "gene"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.genes) %>% .$gene)
keep_hv_sites <- metrna_filt %>% split(.$anno) %>% map(~ .[,.(var = wtd.var(rate,weight)), by = c("id")] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
metrna_filt <- metrna_filt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[gene %in% keep_hv_genes[[y]] & id %in% keep_hv_sites[[y]]]) %>% rbindlist
## Filter annotations with few sites
# keep_anno <- metrna_filt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# metrna_filt <- metrna_filt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
# keep_anno <- metrna_dt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# metrna_dt <- metrna_dt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
}
# Weighted correlation
if (opts$weight == TRUE){
if (opts$method != "pearson") { print("Weighted correlation only supported for pearson"); stop() }
# Correlate rate across samples
if (opts$cor_samples) {
cor_samples <- metrna_filt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("id", "gene", "anno")]
}
# Correlate rate across genes
cor_genes <- metrna_dt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")]
}else{
if (opts$cor_samples) {
# Correlate rate across samples
cor_samples <- metrna_filt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("id", "gene", "anno")]
}
# Correlate rate across genes
cor_genes <- metrna_dt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("sample", "anno")]
}
# Compute adjusted p-values across samples (both FDR and Bonferroni)
if (opts$cor_samples) {
cor_samples <- cor_samples %>% .[, para := c("r", "t", "p")] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%  setorder(padj_fdr)
}
# Compute adjusted p-values across genes (both FDR and Bonferroni)
cor_genes <- cor_genes %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr", "log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
if (opts$cor_samples & opts$permutation) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
# For each iteration...
for (k in 1:opts$n_perms){
# Copy original methylation data
metrna_filt_perm <- copy(metrna_filt)
# Permute gene expression levels
metrna_filt_perm <- metrna_filt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
# Compute correlation across samples
# cor_samples_perm <- metrna_filt_perm[, .(p = wtd.cor(expr, rate, weight)[, c("p.value")]), by = c("id", "gene", "anno")]
cor_samples_perm <- metrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_samples_perm <- cor_samples_perm[, p := pp_vals]
}
cor_genes[,anno:=stringr::str_replace_all(cor_genes$anno, opts$anno_names)]
if (opts$cor_samples) {
cor_samples[,anno:=stringr::str_replace_all(cor_samples$anno, opts$anno_names)]
if (opts$permutation)
cor_samples_perm[,anno:=stringr::str_replace_all(cor_samples_perm$anno, opts$anno_names)]
}
# Boxplot of correlations across samples
if (opts$cor_samples) {
p <- ggplot(cor_samples, aes(x=anno, y=r)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#F8766D") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
scale_y_continuous(limits=c(-0.7,0.7)) + coord_flip() + boxplot_theme()
print(p)
# pdf(file=paste0(io$outdir, "/metrna_boxplot_acrosssamples.pdf"), width=8, height=6)
# print(p)
# dev.off()
}
# Boxplot of correlations across genes
p <- ggplot(cor_genes, aes(x=anno, y=r)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#F8766D") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() + boxplot_theme()
print(p)
# pdf(file=paste0(io$outdir, "/metrna_boxplot_acrossgenes.pdf"), width=8, height=6)
# print(p)
# dev.off()
if (opts$cor_samples & opts$permutation) {
pp <- qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Generate volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Generate permutation plot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Combine and save
print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
# pdf(file=paste0(io$outdir,"/volcano_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
# grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
# dev.off()
}
}
p <- ggplot(cor_genes, aes(x=anno, y=r, fill=lineage)) +
geom_boxplot(alpha=0.8, outlier.shape=NA) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() + boxplot_theme()
print(p)
cor_genes
tmp <- merge(cor_genes, sample_metadata[,c("sample","lineage")], by="sample")
p <- ggplot(tmp, aes(x=anno, y=r, fill=lineage)) +
geom_boxplot(alpha=0.8, outlier.shape=NA) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
coord_flip() + boxplot_theme()
print(p)
p <- ggplot(tmp, aes(x=anno, y=r, fill=lineage)) +
geom_boxplot(alpha=0.8, outlier.shape=NA) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
facet_grid(. ~ anno) +
boxplot_theme() + scale_fill_brewer(palette = "Accent")
print(p)
p <- ggplot(tmp, aes(x=lineage, y=r, fill=lineage)) +
geom_boxplot(alpha=0.8, outlier.shape=NA) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
facet_grid(. ~ anno) +
boxplot_theme() + scale_fill_brewer(palette = "Accent")
print(p)
p <- ggplot(tmp, aes(x=lineage, y=r, fill=lineage)) +
geom_boxplot(alpha=0.8, outlier.shape=NA) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
facet_grid(. ~ anno) +
boxplot_theme() + scale_fill_brewer(palette = "Accent") +
theme(
axis.text.x = element_blank()
)
print(p)
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
source("/Users/ricard/NMT-seq/correlations/utils.R")
# Data
io   <- list()
io$base_dir   <- "/Users/ricard/data/gastrulation_NMT"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset.rds")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$in.sample_metadata <- paste0(io$base_dir,"/sample_metadata.txt")
io$outdir <- "/Users/ricard/gastrulation_NMT/correlations/accrna/out"
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (acc)
# opts$min.cdr        <- 0.5    # minimum cellular detection rate per gene (expr)
# opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
# opts$fraction.sites <- 0.5    # fraction of sites (acc) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
# opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 8e3    # window length for the overlap between genes and features
# opts$n_perms        <- 1000    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F         # Compute correlation across samples?
opts$permutation <- F         # Do permutation test?
# Define which cells to use
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[plate=="E7.5_Plate4" & pass_accQC==T & pass_rnaQC==T,sample]
# Define which genomic contexts to use
opts$annos <- c("prom_100_100", "active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300", "exons", "introns", "Nanog", "Oct4")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_100_100$"="Promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
# Define names for the genomic contexts
opts$anno_names <- c(
"prom_50_50_cgi"="CGI promoters",
"prom_50_50_noncgi"="non-CGI promoters",
"prom_50_50$"="Promoters",
"prom_100_100_cgi"="CGI promoters",
"prom_100_100_noncgi"="non-CGI promoters",
"prom_100_100$"="Promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns"
)
sample_metadata <- fread(io$in.sample_metadata, header=T) %>% .[sample%in%opts$cells]
View(sample_metadata)
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
source("/Users/ricard/NMT-seq/correlations/utils.R")
# Data
io   <- list()
io$base_dir   <- "/Users/ricard/data/gastrulation_NMT"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset.rds")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$in.sample_metadata <- paste0(io$base_dir,"/sample_metadata.txt")
io$outdir <- "/Users/ricard/gastrulation_NMT/correlations/accrna/out"
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (acc)
# opts$min.cdr        <- 0.5    # minimum cellular detection rate per gene (expr)
# opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
# opts$fraction.sites <- 0.5    # fraction of sites (acc) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
# opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 8e3    # window length for the overlap between genes and features
# opts$n_perms        <- 1000    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F         # Compute correlation across samples?
opts$permutation <- F         # Do permutation test?
# Define which cells to use
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[plate=="E7.5_Plate4" & pass_accQC==T & pass_rnaQC==T,sample]
# Define which genomic contexts to use
opts$annos <- c("prom_100_100", "active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300", "exons", "introns", "Nanog", "Oct4")
anno_names <- c("prom_100_100_cgi"="CGI promoters", "prom_100_100_noncgi"="non-CGI promoters", "prom_100_100$"="Promoters", "active_enhancers"="Active enhancers", "super_enhancers"="Super enhancers", "primed_enhancers"="Primed enhancers", "exons"="Exons", "introns"="Introns")
# Define names for the genomic contexts
opts$anno_names <- c(
"prom_50_50_cgi"="CGI promoters",
"prom_50_50_noncgi"="non-CGI promoters",
"prom_50_50$"="Promoters",
"prom_100_100_cgi"="CGI promoters",
"prom_100_100_noncgi"="non-CGI promoters",
"prom_100_100$"="Promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns"
)
sample_metadata <- fread(io$in.sample_metadata, header=T) %>% .[sample%in%opts$cells]
# Load expression as SCESet object
sceset <- readRDS(file = io$rna_file)
# Subset cells
sceset <- sceset[,opts$cells]
# Create data.table
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>% melt(id.vars = "sample", value.name = "expr", variable.name = "gene")
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>%
.[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
# Load accessibility data
accrna_dt <- fread(sprintf("zcat < %s", io$acc_file)) %>% as.data.table %>% .[anno%in%opts$annos & sample%in%opts$cells] %>% .[,anno:=factor(anno, levels=opts$annos)]
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
suppressPackageStartupMessages(library(scater))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(weights))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(grid))
suppressPackageStartupMessages(library(data.table))
source("/Users/ricard/NMT-seq/correlations/utils.R")
# Data
io   <- list()
io$base_dir   <- "/Users/ricard/data/gastrulation_NMT"
io$annos_dir  <- paste0(io$base_dir, "/features/filt")
io$rna_file   <- paste0(io$base_dir, "/rna/parsed/sceset.rds")
io$acc_file   <- paste0(io$base_dir, "/acc/parsed/acc_data.tsv.gz")
io$in.sample_metadata <- paste0(io$base_dir,"/sample_metadata.txt")
io$outdir <- "/Users/ricard/gastrulation_NMT/correlations/accrna/out"
# Filtering parameters
opts <- list()
opts$min.weight     <- 3      # minimum weight per feature
opts$min.coverage   <- 0.4    # minimum coverage per feature across samples (acc)
# opts$min.cdr        <- 0.5    # minimum cellular detection rate per gene (expr)
# opts$fraction.genes <- 0.5    # fraction of genes (expr) to keep based on variance
# opts$fraction.sites <- 0.5    # fraction of sites (acc) to keep based on variance
# opts$min.n          <- 100    # minimum number of features per annotation
# opts$min.s          <- 20     # minimum number of samples to do the correlation
opts$gene_window    <- 8e3    # window length for the overlap between genes and features
# opts$n_perms        <- 1000    # Number of random permutations
opts$threshold_fdr  <- 0.10   # pvalue threshold for significance in FDR
opts$method <- "pearson"      # correlation type
opts$weight <- TRUE           # weighted correlation?
opts$cor_samples <- F         # Compute correlation across samples?
opts$permutation <- F         # Do permutation test?
# Define which cells to use
opts$cells <- fread(io$in.sample_metadata, header=T) %>% .[plate=="E7.5_Plate4" & pass_accQC==T & pass_rnaQC==T,sample]
# Define which genomic contexts to use
opts$annos <- c("prom_2000_2000", "active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300", "exons", "introns", "Nanog", "Oct4")
# opts$annos <- c("prom_100_100", "active_enhancers", "super_enhancers", "primed_enhancers", "CTCF", "p300", "exons", "introns", "Nanog", "Oct4")
# Define names for the genomic contexts
opts$anno_names <- c(
"prom_50_50_cgi"="CGI promoters",
"prom_50_50_noncgi"="non-CGI promoters",
"prom_50_50$"="Promoters",
"prom_100_100_cgi"="CGI promoters",
"prom_100_100_noncgi"="non-CGI promoters",
"prom_100_100$"="Promoters",
"active_enhancers"="Active enhancers",
"super_enhancers"="Super enhancers",
"primed_enhancers"="Primed enhancers",
"exons"="Exons",
"introns"="Introns"
)
sample_metadata <- fread(io$in.sample_metadata, header=T) %>% .[sample%in%opts$cells]
# Load expression as SCESet object
sceset <- readRDS(file = io$rna_file)
# Subset cells
sceset <- sceset[,opts$cells]
# Create data.table
rna <- exprs(sceset) %>% t %>% as.data.table(keep.rownames = "sample") %>% melt(id.vars = "sample", value.name = "expr", variable.name = "gene")
# Extract gene coordinates metadata to do the overlap
rna_metadata <- fData(sceset) %>% tibble::rownames_to_column("gene") %>% as.data.table %>% .[,c("chr", "start", "end", "gene", "ens_id")]  %>%
.[, chr := as.factor(sub("chr", "", chr))] %>% setnames("ens_id", "id")
# Load accessibility data
accrna_dt <- fread(sprintf("zcat < %s", io$acc_file)) %>% as.data.table %>% .[anno%in%opts$annos & sample%in%opts$cells] %>% .[,anno:=factor(anno, levels=opts$annos)]
anno_dt <- lapply(opts$annos, function(anno) fread(sprintf("%s/%s.bed", io$annos_dir, anno),
colClasses = c("character", "integer", "integer", "character", "character", "character"))[, c(1, 2, 3, 4, 5, 6)]) %>%
rbindlist %>% setnames(c("chr", "start", "end", "strand", "id", "anno")) %>% .[,c("anno", "chr") := list(as.factor(anno), as.factor(chr))]
accrna_list <- list()
# Iterate over each feature
for (ann in unique(accrna_dt$anno)){
# Subset corresponding anno
acc_tmp <- accrna_dt[anno == ann, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(acc_tmp$id)) == FALSE)) {
# Extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- anno_dt[anno == ann, c("chr", "start", "end", "id")] %>% setkey(chr, start, end)
rna_metadata_tmp <- rna_metadata[, c("chr", "start", "end", "gene")] %>%
.[,c("start", "end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr, start, end)
# Do the overlap
ov <- foverlaps(feature_metadata_tmp, rna_metadata_tmp, nomatch = 0) %>% .[,c("gene", "id")]
# Add expression levels
ov_rna <- merge(rna, ov, by = "gene", allow.cartesian = TRUE)
# Merge with methylation data
accrna_list[[ann]] <- merge(ov_rna, acc_tmp, by = c("sample", "id")) %>%
.[,c("sample", "id", "gene", "anno", "expr", "rate", "weight")]
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(acc_tmp$id)) == TRUE)) {
acc_tmp <- merge(acc_tmp, rna_metadata[, c("id", "gene")], by = "id")
accrna_list[[ann]] <- merge(rna, acc_tmp, by = c("sample", "gene")) %>%
.[,c("sample", "id", "gene", "anno", "expr", "rate", "weight")]
}
}
accrna_dt <- rbindlist(accrna_list)
rm(accrna_list, acc_tmp, feature_metadata_tmp, rna_metadata_tmp, ov, ov_rna)
# Remove features with low weight (all types of correlation)
accrna_dt <- accrna_dt[weight >= opts$min.weight]
if (opts$cor_samples) {
# To correlate across samples
accrna_filt <- copy(accrna_dt)
## Remove genes/features with constant expression across samples
keep_var_genes <- accrna_filt %>% split(.$anno) %>% map(~ .[, .(var = var(expr)), by = "gene"] %>% .[var > 2, gene])
keep_var_sites <- accrna_filt %>% split(.$anno) %>% map(~ .[, .(var = wtd.var(rate, weight)), by = c("id")] %>% .[var > 2, id])
accrna_filt <- accrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_var_genes[[y]] & id %in% keep_var_sites[[y]]]) %>% rbindlist
## Filter genes with low cellular detection rate and sites with low coverage across samples
nsamples <- length(unique(accrna_filt$sample))
keep_cov_genes <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(cdr = sum(expr>0)/.N), by = "gene"] %>% .[cdr >= opts$min.cdr, gene])
keep_cov_sites <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(cov = .N/nsamples), by = c("id")] %>% .[cov >= opts$min.coverage, id])
accrna_filt <- accrna_filt %>% split(.$anno) %>% map2(., names(.), function(x,y) x[gene %in% keep_cov_genes[[y]] & id %in% keep_cov_sites[[y]]]) %>% rbindlist
## Extract highly variable genes/sites across samples
keep_hv_genes <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(var = var(expr)), by = "gene"] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.genes) %>% .$gene)
keep_hv_sites <- accrna_filt %>% split(.$anno) %>% map(~ .[,.(var = wtd.var(rate,weight)), by = c("id")] %>% setorder(-var)  %>% head(n = nrow(.) * opts$fraction.sites) %>% .$id)
accrna_filt <- accrna_filt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[gene %in% keep_hv_genes[[y]] & id %in% keep_hv_sites[[y]]]) %>% rbindlist
## Filter id-gene pairs with small number of samples (only required for the correlation across samples)
accrna_filt <- accrna_filt[,n:=.N, by=c("gene","id","anno")] %>% .[n >= opts$min.s] %>% .[,n:=NULL]
## Filter annotations with few sites
# keep_anno   <- accrna_filt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# accrna_filt <- accrna_filt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
}
# keep_anno   <- accrna_dt[, .(N = length(unique(id))), by = "anno"] %>% .[N > opts$min.n, anno]
# accrna_dt   <- accrna_dt[anno %in% keep_anno] %>% .[, anno := drop.levels(anno)]
# Weighted correlation
if (opts$weight == TRUE){
if (opts$method != "pearson") { print("Weighted correlation only supported for pearson"); stop() }
# Correlate rate across samples
if (opts$cor_samples) {
cor_samples <- accrna_filt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("id", "gene", "anno")]
}
# Correlate rate across genes
cor_genes <- accrna_dt[, wtd.cor(rate, expr, weight)[, c("correlation", "t.value", "p.value")], by = c("sample", "anno")]
}else{
if (opts$cor_samples) {
# Correlate rate across samples
cor_samples <- accrna_filt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("id", "gene", "anno")]
}
# Correlate rate across genes
cor_genes <- accrna_dt[, .(V1 = unlist(cor.test(rate, expr, alternative = "two.sided", method = opts$method)[c("estimate", "statistic", "p.value")])), by = c("sample", "anno")]
}
# Compute adjusted p-values across samples (both FDR and Bonferroni)
if (opts$cor_samples) {
cor_samples <- cor_samples %>% .[, para := c("r", "t", "p")] %>% dcast(id + gene + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = "anno"] %>%
.[, c("log_padj_fdr","log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>%  setorder(padj_fdr)
}
# Compute adjusted p-values across genes (both FDR and Bonferroni)
cor_genes <- cor_genes %>% .[,para := c("r", "t", "p")] %>% dcast(sample + anno ~ para, value.var = "V1") %>%
.[, c("padj_fdr", "padj_bonf") := list(p.adjust(p, method = "fdr"), p.adjust(p, method = "bonferroni")), by = anno] %>%
.[, c("log_padj_fdr", "log_padj_bonf") := list(-log10(padj_fdr), -log10(padj_bonf))] %>%
.[, sig := padj_fdr <= opts$threshold_fdr] %>% setorder(padj_fdr)
if (opts$cor_samples) {
if (opts$permutation) {
pp_vals <- vector(mode = "numeric", length = length(cor_samples$p))
# For each iteration...
for (k in 1:opts$n_perms){
# Copy original methylation data
accrna_filt_perm <- copy(accrna_filt)
# Permute gene expression levels
accrna_filt_perm <- accrna_filt_perm[, expr := sample(expr), by = c("gene", "id", "anno")]
# Compute correlation across samples
# cor_samples_perm <- accrna_filt_perm[, .(p = wtd.cor(expr, rate, weight)[, c("p.value")]), by = c("id", "gene", "anno")]
cor_samples_perm <- accrna_filt_perm[, .(p = cor.test(rate, expr, method=opts$method)[["p.value"]]), by = c("id","gene","anno")]
# For each annotation sort by p-value
cor_samples_perm <- cor_samples_perm %>% split(.$anno) %>% map(~ .[,.(anno = anno, p = sort(p))]) %>% rbindlist
# Add the sorted p-values
pp_vals <- pp_vals + cor_samples_perm %>% .[, p]
}
# Compute the average p-values
pp_vals <- pp_vals / opts$n_perms
# Store them in a data.table for later analysis
cor_samples_perm <- cor_samples_perm[, p := pp_vals]
}
}
if (opts$cor_samples) {
cor_samples[,anno:=stringr::str_replace_all(cor_samples$anno, opts$anno_names)]# %>%  .[,anno:=factor(anno, levels=opts$annos)]
if (opts$permutation)
cor_samples_perm[,anno:=stringr::str_replace_all(cor_samples_perm$anno, opts$anno_names)]
}
cor_genes[,anno:=stringr::str_replace_all(cor_genes$anno, opts$anno_names)]# %>%  .[,anno:=factor(anno, levels=opts$annos)]
# Boxplot of correlations across samples
if (opts$cor_samples) {
p <- ggplot(cor_samples, aes(x=anno, y=r)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#00BFC4") + geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across cells", x="", y="Weighted Pearson correlation coefficient") +
# scale_y_continuous(limits=c(-0.7,0.7)) +
coord_flip() + boxplot_theme()
print(p)
# pdf(file=paste0(io$outdir, "/accrna_boxplot_acrosssamples.pdf"), width=8, height=6)
# print(p)
# dev.off()
}
# Boxplot of correlations across genes
tmp <- merge(cor_genes, sample_metadata[,c("sample")], by="sample")
p <- ggplot(tmp, aes(x=anno, y=r)) +
geom_boxplot(alpha=0.8, outlier.shape=NA, fill="#00BFC4") +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
# scale_y_continuous(limits=c(-0.41, 0.05)) +
coord_flip() + boxplot_theme()
print(p)
# pdf(file=paste0(io$outdir, "/accrna_boxplot_acrossgenes.pdf"), width=8, height=6)
# print(p)
# dev.off()
# Boxplot of correlations across genes by lineage
tmp <- merge(cor_genes, sample_metadata[,c("sample","lineage")], by="sample")
p <- ggplot(tmp, aes(x=lineage, y=r, fill=lineage)) +
geom_boxplot(alpha=0.8, outlier.shape=NA) +
geom_hline(yintercept=0, colour="black", linetype="dashed") +
labs(title="Correlation across genes", x="", y="Weighted Pearson correlation coefficient") +
facet_grid(. ~ anno) +
boxplot_theme() + scale_fill_brewer(palette = "Accent") +
theme(
axis.text.x = element_blank()
)
print(p)
if (opts$cor_samples & opts$permutation) {
pp <- qq <- list()
for (n in unique(cor_samples$anno)) {
# Compute positive and negative hits in terms of correlation
negative_hits <- cor_samples[anno==n & sig==TRUE & r<0,id]
positive_hits <- cor_samples[anno==n & sig==TRUE & r>0,id]
all <- nrow(cor_samples[anno == n,])
# Generate volcano plot
pp[[n]] <- gg_volcano_plot(cor_samples[anno == n,], title = "")
# Generate permutation plot
qq[[n]] <- gg_qqplot(cor_samples[anno == n, ], cor_samples_perm[anno == n]$p, title = "")
# Combine and save
print(plot_grid(pp[[n]], qq[[n]], labels = c("", ""), label_size = 20, ncol = 2, nrow = 1))
# pdf(file=paste0(io$outdir,"/volcano_", n, ".pdf"), width = 14, height = 8, useDingbats = FALSE)
# grid.arrange(pp[[n]], qq[[n]], ncol=2, top = textGrob(n, gp=gpar(fontsize=29, fontface = "bold")), newpage = TRUE)
# dev.off()
}
}
